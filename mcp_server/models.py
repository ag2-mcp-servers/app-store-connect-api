# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:47:13+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import List, Optional, Union

from pydantic import AnyUrl, BaseModel, EmailStr, RootModel


class AlcoholTobaccoOrDrugUseOrReferences(Enum):
    NONE = 'NONE'
    INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
    FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'


class Contests(Enum):
    NONE = 'NONE'
    INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
    FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'


class GamblingSimulated(Enum):
    NONE = 'NONE'
    INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
    FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'


class HorrorOrFearThemes(Enum):
    NONE = 'NONE'
    INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
    FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'


class MatureOrSuggestiveThemes(Enum):
    NONE = 'NONE'
    INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
    FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'


class MedicalOrTreatmentInformation(Enum):
    NONE = 'NONE'
    INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
    FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'


class ProfanityOrCrudeHumor(Enum):
    NONE = 'NONE'
    INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
    FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'


class SexualContentGraphicAndNudity(Enum):
    NONE = 'NONE'
    INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
    FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'


class SexualContentOrNudity(Enum):
    NONE = 'NONE'
    INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
    FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'


class ViolenceCartoonOrFantasy(Enum):
    NONE = 'NONE'
    INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
    FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'


class ViolenceRealistic(Enum):
    NONE = 'NONE'
    INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
    FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'


class ViolenceRealisticProlongedGraphicOrSadistic(Enum):
    NONE = 'NONE'
    INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
    FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'


class Type(Enum):
    ageRatingDeclarations = 'ageRatingDeclarations'


class ContentRightsDeclaration(Enum):
    DOES_NOT_USE_THIRD_PARTY_CONTENT = 'DOES_NOT_USE_THIRD_PARTY_CONTENT'
    USES_THIRD_PARTY_CONTENT = 'USES_THIRD_PARTY_CONTENT'


class Attributes2(BaseModel):
    availableInNewTerritories: Optional[bool] = None
    bundleId: Optional[str] = None
    contentRightsDeclaration: Optional[ContentRightsDeclaration] = None
    isOrEverWasMadeForKids: Optional[bool] = None
    name: Optional[str] = None
    primaryLocale: Optional[str] = None
    sku: Optional[str] = None


class Type2(Enum):
    appInfos = 'appInfos'


class Datum(BaseModel):
    id: str
    type: Type2


class Links(BaseModel):
    related: Optional[str] = None
    self: Optional[str] = None


class Type3(Enum):
    appStoreVersions = 'appStoreVersions'


class Datum1(BaseModel):
    id: str
    type: Type3


class Type4(Enum):
    territories = 'territories'


class Datum2(BaseModel):
    id: str
    type: Type4


class Type5(Enum):
    betaAppLocalizations = 'betaAppLocalizations'


class Datum3(BaseModel):
    id: str
    type: Type5


class Type6(Enum):
    betaAppReviewDetails = 'betaAppReviewDetails'


class Data1(BaseModel):
    id: str
    type: Type6


class BetaAppReviewDetail(BaseModel):
    data: Optional[Data1] = None
    links: Optional[Links] = None


class Type7(Enum):
    betaGroups = 'betaGroups'


class Datum4(BaseModel):
    id: str
    type: Type7


class Type8(Enum):
    betaLicenseAgreements = 'betaLicenseAgreements'


class Data2(BaseModel):
    id: str
    type: Type8


class BetaLicenseAgreement(BaseModel):
    data: Optional[Data2] = None
    links: Optional[Links] = None


class Type9(Enum):
    builds = 'builds'


class Datum5(BaseModel):
    id: str
    type: Type9


class Type10(Enum):
    endUserLicenseAgreements = 'endUserLicenseAgreements'


class Data3(BaseModel):
    id: str
    type: Type10


class EndUserLicenseAgreement(BaseModel):
    data: Optional[Data3] = None
    links: Optional[Links] = None


class Type11(Enum):
    gameCenterEnabledVersions = 'gameCenterEnabledVersions'


class Datum6(BaseModel):
    id: str
    type: Type11


class Type12(Enum):
    inAppPurchases = 'inAppPurchases'


class Datum7(BaseModel):
    id: str
    type: Type12


class Type13(Enum):
    appPreOrders = 'appPreOrders'


class Data4(BaseModel):
    id: str
    type: Type13


class PreOrder(BaseModel):
    data: Optional[Data4] = None
    links: Optional[Links] = None


class Type14(Enum):
    preReleaseVersions = 'preReleaseVersions'


class Datum8(BaseModel):
    id: str
    type: Type14


class Type15(Enum):
    appPrices = 'appPrices'


class Datum9(BaseModel):
    id: str
    type: Type15


class Type16(Enum):
    apps = 'apps'


class Type17(Enum):
    betaTesters = 'betaTesters'


class Datum10(BaseModel):
    id: str
    type: Type17


class AppBetaTestersLinkagesRequest(BaseModel):
    data: List[Datum10]


class Type18(Enum):
    appCategories = 'appCategories'


class Data5(BaseModel):
    id: str
    type: Type18


class Parent(BaseModel):
    data: Optional[Data5] = None
    links: Optional[Links] = None


class Datum11(BaseModel):
    id: str
    type: Type18


class Type21(Enum):
    apps = 'apps'


class Data6(BaseModel):
    id: str
    type: Type21


class App1(BaseModel):
    data: Optional[Data6] = None
    links: Optional[Links] = None


class Relationships2(BaseModel):
    app: Optional[App1] = None


class Type22(Enum):
    appEncryptionDeclarations = 'appEncryptionDeclarations'


class Type23(Enum):
    builds = 'builds'


class Datum12(BaseModel):
    id: str
    type: Type23


class AppEncryptionDeclarationBuildsLinkagesRequest(BaseModel):
    data: List[Datum12]


class AppEncryptionDeclarationState(Enum):
    IN_REVIEW = 'IN_REVIEW'
    APPROVED = 'APPROVED'
    REJECTED = 'REJECTED'
    INVALID = 'INVALID'
    EXPIRED = 'EXPIRED'


class Type24(Enum):
    ageRatingDeclarations = 'ageRatingDeclarations'


class Data7(BaseModel):
    id: str
    type: Type24


class AgeRatingDeclaration1(BaseModel):
    data: Optional[Data7] = None
    links: Optional[Links] = None


class Type25(Enum):
    apps = 'apps'


class Data8(BaseModel):
    id: str
    type: Type25


class App2(BaseModel):
    data: Optional[Data8] = None
    links: Optional[Links] = None


class Type26(Enum):
    appInfoLocalizations = 'appInfoLocalizations'


class Datum13(BaseModel):
    id: str
    type: Type26


class Type27(Enum):
    appCategories = 'appCategories'


class Data9(BaseModel):
    id: str
    type: Type27


class PrimaryCategory(BaseModel):
    data: Optional[Data9] = None
    links: Optional[Links] = None


class Data10(BaseModel):
    id: str
    type: Type27


class PrimarySubcategoryOne(BaseModel):
    data: Optional[Data10] = None
    links: Optional[Links] = None


class Data11(BaseModel):
    id: str
    type: Type27


class PrimarySubcategoryTwo(BaseModel):
    data: Optional[Data11] = None
    links: Optional[Links] = None


class Data12(BaseModel):
    id: str
    type: Type27


class SecondaryCategory(BaseModel):
    data: Optional[Data12] = None
    links: Optional[Links] = None


class Data13(BaseModel):
    id: str
    type: Type27


class SecondarySubcategoryOne(BaseModel):
    data: Optional[Data13] = None
    links: Optional[Links] = None


class Data14(BaseModel):
    id: str
    type: Type27


class SecondarySubcategoryTwo(BaseModel):
    data: Optional[Data14] = None
    links: Optional[Links] = None


class Type33(Enum):
    appInfos = 'appInfos'


class Attributes6(BaseModel):
    locale: Optional[str] = None
    name: Optional[str] = None
    privacyPolicyText: Optional[str] = None
    privacyPolicyUrl: Optional[str] = None
    subtitle: Optional[str] = None


class Data15(BaseModel):
    id: str
    type: Type33


class AppInfo1(BaseModel):
    data: Optional[Data15] = None
    links: Optional[Links] = None


class Relationships4(BaseModel):
    appInfo: Optional[AppInfo1] = None


class Type35(Enum):
    appInfoLocalizations = 'appInfoLocalizations'


class Attributes7(BaseModel):
    locale: str
    name: Optional[str] = None
    privacyPolicyText: Optional[str] = None
    privacyPolicyUrl: Optional[str] = None
    subtitle: Optional[str] = None


class Type36(Enum):
    appInfos = 'appInfos'


class Data17(BaseModel):
    id: str
    type: Type36


class AppInfo2(BaseModel):
    data: Data17


class Relationships5(BaseModel):
    appInfo: AppInfo2


class Type37(Enum):
    appInfoLocalizations = 'appInfoLocalizations'


class Data16(BaseModel):
    attributes: Attributes7
    relationships: Relationships5
    type: Type37


class AppInfoLocalizationCreateRequest(BaseModel):
    data: Data16


class Attributes8(BaseModel):
    name: Optional[str] = None
    privacyPolicyText: Optional[str] = None
    privacyPolicyUrl: Optional[str] = None
    subtitle: Optional[str] = None


class Data18(BaseModel):
    attributes: Optional[Attributes8] = None
    id: str
    type: Type37


class AppInfoLocalizationUpdateRequest(BaseModel):
    data: Data18


class Type39(Enum):
    appCategories = 'appCategories'


class Data20(BaseModel):
    id: str
    type: Type39


class PrimaryCategory1(BaseModel):
    data: Optional[Data20] = None


class Data21(BaseModel):
    id: str
    type: Type39


class PrimarySubcategoryOne1(BaseModel):
    data: Optional[Data21] = None


class Data22(BaseModel):
    id: str
    type: Type39


class PrimarySubcategoryTwo1(BaseModel):
    data: Optional[Data22] = None


class Data23(BaseModel):
    id: str
    type: Type39


class SecondaryCategory1(BaseModel):
    data: Optional[Data23] = None


class Data24(BaseModel):
    id: str
    type: Type39


class SecondarySubcategoryOne1(BaseModel):
    data: Optional[Data24] = None


class Data25(BaseModel):
    id: str
    type: Type39


class SecondarySubcategoryTwo1(BaseModel):
    data: Optional[Data25] = None


class Relationships6(BaseModel):
    primaryCategory: Optional[PrimaryCategory1] = None
    primarySubcategoryOne: Optional[PrimarySubcategoryOne1] = None
    primarySubcategoryTwo: Optional[PrimarySubcategoryTwo1] = None
    secondaryCategory: Optional[SecondaryCategory1] = None
    secondarySubcategoryOne: Optional[SecondarySubcategoryOne1] = None
    secondarySubcategoryTwo: Optional[SecondarySubcategoryTwo1] = None


class Type45(Enum):
    appInfos = 'appInfos'


class Data19(BaseModel):
    id: str
    relationships: Optional[Relationships6] = None
    type: Type45


class AppInfoUpdateRequest(BaseModel):
    data: Data19


class State(Enum):
    AWAITING_UPLOAD = 'AWAITING_UPLOAD'
    UPLOAD_COMPLETE = 'UPLOAD_COMPLETE'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'


class AppMediaStateError(BaseModel):
    code: Optional[str] = None
    description: Optional[str] = None


class Attributes9(BaseModel):
    appReleaseDate: Optional[date] = None
    preOrderAvailableDate: Optional[date] = None


class Type46(Enum):
    apps = 'apps'


class Data26(BaseModel):
    id: str
    type: Type46


class App3(BaseModel):
    data: Optional[Data26] = None
    links: Optional[Links] = None


class Relationships7(BaseModel):
    app: Optional[App3] = None


class Type47(Enum):
    appPreOrders = 'appPreOrders'


class Attributes10(BaseModel):
    appReleaseDate: Optional[date] = None


class Type48(Enum):
    apps = 'apps'


class Data28(BaseModel):
    id: str
    type: Type48


class App4(BaseModel):
    data: Data28


class Relationships8(BaseModel):
    app: App4


class Type49(Enum):
    appPreOrders = 'appPreOrders'


class Data27(BaseModel):
    attributes: Optional[Attributes10] = None
    relationships: Relationships8
    type: Type49


class AppPreOrderCreateRequest(BaseModel):
    data: Data27


class Data29(BaseModel):
    attributes: Optional[Attributes10] = None
    id: str
    type: Type49


class AppPreOrderUpdateRequest(BaseModel):
    data: Data29


class Type51(Enum):
    appPreviewSets = 'appPreviewSets'


class Data30(BaseModel):
    id: str
    type: Type51


class AppPreviewSet(BaseModel):
    data: Optional[Data30] = None
    links: Optional[Links] = None


class Relationships9(BaseModel):
    appPreviewSet: Optional[AppPreviewSet] = None


class Type52(Enum):
    appPreviews = 'appPreviews'


class Attributes13(BaseModel):
    fileName: str
    fileSize: int
    mimeType: Optional[str] = None
    previewFrameTimeCode: Optional[str] = None


class Type53(Enum):
    appPreviewSets = 'appPreviewSets'


class Data32(BaseModel):
    id: str
    type: Type53


class AppPreviewSet1(BaseModel):
    data: Data32


class Relationships10(BaseModel):
    appPreviewSet: AppPreviewSet1


class Type54(Enum):
    appPreviews = 'appPreviews'


class Data31(BaseModel):
    attributes: Attributes13
    relationships: Relationships10
    type: Type54


class AppPreviewCreateRequest(BaseModel):
    data: Data31


class Datum14(BaseModel):
    id: str
    type: Type54


class Type56(Enum):
    appStoreVersionLocalizations = 'appStoreVersionLocalizations'


class Data33(BaseModel):
    id: str
    type: Type56


class AppStoreVersionLocalization(BaseModel):
    data: Optional[Data33] = None
    links: Optional[Links] = None


class Type57(Enum):
    appPreviewSets = 'appPreviewSets'


class Type58(Enum):
    appPreviews = 'appPreviews'


class Datum15(BaseModel):
    id: str
    type: Type58


class AppPreviewSetAppPreviewsLinkagesRequest(BaseModel):
    data: List[Datum15]


class Datum16(BaseModel):
    id: str
    type: Type58


class Type60(Enum):
    appStoreVersionLocalizations = 'appStoreVersionLocalizations'


class Data35(BaseModel):
    id: str
    type: Type60


class AppStoreVersionLocalization1(BaseModel):
    data: Data35


class Relationships12(BaseModel):
    appStoreVersionLocalization: AppStoreVersionLocalization1


class Type61(Enum):
    appPreviewSets = 'appPreviewSets'


class Attributes16(BaseModel):
    previewFrameTimeCode: Optional[str] = None
    sourceFileChecksum: Optional[str] = None
    uploaded: Optional[bool] = None


class Type62(Enum):
    appPreviews = 'appPreviews'


class Data36(BaseModel):
    attributes: Optional[Attributes16] = None
    id: str
    type: Type62


class AppPreviewUpdateRequest(BaseModel):
    data: Data36


class Type63(Enum):
    apps = 'apps'


class Data37(BaseModel):
    id: str
    type: Type63


class App5(BaseModel):
    data: Optional[Data37] = None
    links: Optional[Links] = None


class Type64(Enum):
    appPriceTiers = 'appPriceTiers'


class Data38(BaseModel):
    id: str
    type: Type64


class PriceTier(BaseModel):
    data: Optional[Data38] = None
    links: Optional[Links] = None


class Relationships13(BaseModel):
    app: Optional[App5] = None
    priceTier: Optional[PriceTier] = None


class Type65(Enum):
    appPrices = 'appPrices'


class Attributes17(BaseModel):
    customerPrice: Optional[str] = None
    proceeds: Optional[str] = None


class Type66(Enum):
    appPriceTiers = 'appPriceTiers'


class Data39(BaseModel):
    id: str
    type: Type66


class PriceTier1(BaseModel):
    data: Optional[Data39] = None
    links: Optional[Links] = None


class Type67(Enum):
    territories = 'territories'


class Data40(BaseModel):
    id: str
    type: Type67


class Territory(BaseModel):
    data: Optional[Data40] = None
    links: Optional[Links] = None


class Relationships14(BaseModel):
    priceTier: Optional[PriceTier1] = None
    territory: Optional[Territory] = None


class Type68(Enum):
    appPricePoints = 'appPricePoints'


class Datum17(BaseModel):
    id: str
    type: Type68


class Type70(Enum):
    appPriceTiers = 'appPriceTiers'


class Type71(Enum):
    appScreenshotSets = 'appScreenshotSets'


class Data41(BaseModel):
    id: str
    type: Type71


class AppScreenshotSet(BaseModel):
    data: Optional[Data41] = None
    links: Optional[Links] = None


class Relationships16(BaseModel):
    appScreenshotSet: Optional[AppScreenshotSet] = None


class Type72(Enum):
    appScreenshots = 'appScreenshots'


class Attributes19(BaseModel):
    fileName: str
    fileSize: int


class Type73(Enum):
    appScreenshotSets = 'appScreenshotSets'


class Data43(BaseModel):
    id: str
    type: Type73


class AppScreenshotSet1(BaseModel):
    data: Data43


class Relationships17(BaseModel):
    appScreenshotSet: AppScreenshotSet1


class Type74(Enum):
    appScreenshots = 'appScreenshots'


class Data42(BaseModel):
    attributes: Attributes19
    relationships: Relationships17
    type: Type74


class AppScreenshotCreateRequest(BaseModel):
    data: Data42


class Datum18(BaseModel):
    id: str
    type: Type74


class Type76(Enum):
    appStoreVersionLocalizations = 'appStoreVersionLocalizations'


class Data44(BaseModel):
    id: str
    type: Type76


class AppStoreVersionLocalization2(BaseModel):
    data: Optional[Data44] = None
    links: Optional[Links] = None


class Type77(Enum):
    appScreenshotSets = 'appScreenshotSets'


class Type78(Enum):
    appScreenshots = 'appScreenshots'


class Datum19(BaseModel):
    id: str
    type: Type78


class AppScreenshotSetAppScreenshotsLinkagesRequest(BaseModel):
    data: List[Datum19]


class Datum20(BaseModel):
    id: str
    type: Type78


class Type80(Enum):
    appStoreVersionLocalizations = 'appStoreVersionLocalizations'


class Data46(BaseModel):
    id: str
    type: Type80


class AppStoreVersionLocalization3(BaseModel):
    data: Data46


class Relationships19(BaseModel):
    appStoreVersionLocalization: AppStoreVersionLocalization3


class Type81(Enum):
    appScreenshotSets = 'appScreenshotSets'


class Attributes22(BaseModel):
    sourceFileChecksum: Optional[str] = None
    uploaded: Optional[bool] = None


class Type82(Enum):
    appScreenshots = 'appScreenshots'


class Data47(BaseModel):
    attributes: Optional[Attributes22] = None
    id: str
    type: Type82


class AppScreenshotUpdateRequest(BaseModel):
    data: Data47


class AppStoreAgeRating(Enum):
    FOUR_PLUS = 'FOUR_PLUS'
    NINE_PLUS = 'NINE_PLUS'
    TWELVE_PLUS = 'TWELVE_PLUS'
    SEVENTEEN_PLUS = 'SEVENTEEN_PLUS'


class Type83(Enum):
    appStoreReviewDetails = 'appStoreReviewDetails'


class Data48(BaseModel):
    id: str
    type: Type83


class AppStoreReviewDetail(BaseModel):
    data: Optional[Data48] = None
    links: Optional[Links] = None


class Relationships20(BaseModel):
    appStoreReviewDetail: Optional[AppStoreReviewDetail] = None


class Type84(Enum):
    appStoreReviewAttachments = 'appStoreReviewAttachments'


class Attributes24(BaseModel):
    fileName: str
    fileSize: int


class Type85(Enum):
    appStoreReviewDetails = 'appStoreReviewDetails'


class Data50(BaseModel):
    id: str
    type: Type85


class AppStoreReviewDetail1(BaseModel):
    data: Data50


class Relationships21(BaseModel):
    appStoreReviewDetail: AppStoreReviewDetail1


class Type86(Enum):
    appStoreReviewAttachments = 'appStoreReviewAttachments'


class Data49(BaseModel):
    attributes: Attributes24
    relationships: Relationships21
    type: Type86


class AppStoreReviewAttachmentCreateRequest(BaseModel):
    data: Data49


class Attributes25(BaseModel):
    sourceFileChecksum: Optional[str] = None
    uploaded: Optional[bool] = None


class Data51(BaseModel):
    attributes: Optional[Attributes25] = None
    id: str
    type: Type86


class AppStoreReviewAttachmentUpdateRequest(BaseModel):
    data: Data51


class Attributes26(BaseModel):
    contactEmail: Optional[str] = None
    contactFirstName: Optional[str] = None
    contactLastName: Optional[str] = None
    contactPhone: Optional[str] = None
    demoAccountName: Optional[str] = None
    demoAccountPassword: Optional[str] = None
    demoAccountRequired: Optional[bool] = None
    notes: Optional[str] = None


class Datum21(BaseModel):
    id: str
    type: Type86


class Type89(Enum):
    appStoreVersions = 'appStoreVersions'


class Data52(BaseModel):
    id: str
    type: Type89


class AppStoreVersion1(BaseModel):
    data: Optional[Data52] = None
    links: Optional[Links] = None


class Type90(Enum):
    appStoreReviewDetails = 'appStoreReviewDetails'


class Type91(Enum):
    appStoreVersions = 'appStoreVersions'


class Data54(BaseModel):
    id: str
    type: Type91


class AppStoreVersion2(BaseModel):
    data: Data54


class Relationships23(BaseModel):
    appStoreVersion: AppStoreVersion2


class Type92(Enum):
    appStoreReviewDetails = 'appStoreReviewDetails'


class Data53(BaseModel):
    attributes: Optional[Attributes26] = None
    relationships: Relationships23
    type: Type92


class AppStoreReviewDetailCreateRequest(BaseModel):
    data: Data53


class Data55(BaseModel):
    attributes: Optional[Attributes26] = None
    id: str
    type: Type92


class AppStoreReviewDetailUpdateRequest(BaseModel):
    data: Data55


class ReleaseType(Enum):
    MANUAL = 'MANUAL'
    AFTER_APPROVAL = 'AFTER_APPROVAL'
    SCHEDULED = 'SCHEDULED'


class Type94(Enum):
    ageRatingDeclarations = 'ageRatingDeclarations'


class Data56(BaseModel):
    id: str
    type: Type94


class AgeRatingDeclaration2(BaseModel):
    data: Optional[Data56] = None
    links: Optional[Links] = None


class Type95(Enum):
    apps = 'apps'


class Data57(BaseModel):
    id: str
    type: Type95


class App6(BaseModel):
    data: Optional[Data57] = None
    links: Optional[Links] = None


class Type96(Enum):
    appStoreReviewDetails = 'appStoreReviewDetails'


class Data58(BaseModel):
    id: str
    type: Type96


class AppStoreReviewDetail3(BaseModel):
    data: Optional[Data58] = None
    links: Optional[Links] = None


class Type97(Enum):
    appStoreVersionLocalizations = 'appStoreVersionLocalizations'


class Datum22(BaseModel):
    id: str
    type: Type97


class Type98(Enum):
    appStoreVersionPhasedReleases = 'appStoreVersionPhasedReleases'


class Data59(BaseModel):
    id: str
    type: Type98


class AppStoreVersionPhasedRelease(BaseModel):
    data: Optional[Data59] = None
    links: Optional[Links] = None


class Type99(Enum):
    appStoreVersionSubmissions = 'appStoreVersionSubmissions'


class Data60(BaseModel):
    id: str
    type: Type99


class AppStoreVersionSubmission(BaseModel):
    data: Optional[Data60] = None
    links: Optional[Links] = None


class Type100(Enum):
    builds = 'builds'


class Data61(BaseModel):
    id: str
    type: Type100


class Build1(BaseModel):
    data: Optional[Data61] = None
    links: Optional[Links] = None


class Type101(Enum):
    idfaDeclarations = 'idfaDeclarations'


class Data62(BaseModel):
    id: str
    type: Type101


class IdfaDeclaration(BaseModel):
    data: Optional[Data62] = None
    links: Optional[Links] = None


class Type102(Enum):
    routingAppCoverages = 'routingAppCoverages'


class Data63(BaseModel):
    id: str
    type: Type102


class RoutingAppCoverage(BaseModel):
    data: Optional[Data63] = None
    links: Optional[Links] = None


class Type103(Enum):
    appStoreVersions = 'appStoreVersions'


class Type104(Enum):
    builds = 'builds'


class Data64(BaseModel):
    id: str
    type: Type104


class AppStoreVersionBuildLinkageRequest(BaseModel):
    data: Data64


class Data65(BaseModel):
    id: str
    type: Type104


class Type106(Enum):
    apps = 'apps'


class Data67(BaseModel):
    id: str
    type: Type106


class App7(BaseModel):
    data: Data67


class Type107(Enum):
    builds = 'builds'


class Data68(BaseModel):
    id: str
    type: Type107


class Build2(BaseModel):
    data: Optional[Data68] = None


class Relationships25(BaseModel):
    app: App7
    build: Optional[Build2] = None


class Type108(Enum):
    appStoreVersions = 'appStoreVersions'


class Attributes31(BaseModel):
    description: Optional[str] = None
    keywords: Optional[str] = None
    locale: Optional[str] = None
    marketingUrl: Optional[AnyUrl] = None
    promotionalText: Optional[str] = None
    supportUrl: Optional[AnyUrl] = None
    whatsNew: Optional[str] = None


class Type109(Enum):
    appPreviewSets = 'appPreviewSets'


class Datum23(BaseModel):
    id: str
    type: Type109


class Type110(Enum):
    appScreenshotSets = 'appScreenshotSets'


class Datum24(BaseModel):
    id: str
    type: Type110


class Type111(Enum):
    appStoreVersions = 'appStoreVersions'


class Data69(BaseModel):
    id: str
    type: Type111


class AppStoreVersion3(BaseModel):
    data: Optional[Data69] = None
    links: Optional[Links] = None


class Type112(Enum):
    appStoreVersionLocalizations = 'appStoreVersionLocalizations'


class Attributes32(BaseModel):
    description: Optional[str] = None
    keywords: Optional[str] = None
    locale: str
    marketingUrl: Optional[AnyUrl] = None
    promotionalText: Optional[str] = None
    supportUrl: Optional[AnyUrl] = None
    whatsNew: Optional[str] = None


class Type113(Enum):
    appStoreVersions = 'appStoreVersions'


class Data71(BaseModel):
    id: str
    type: Type113


class AppStoreVersion4(BaseModel):
    data: Data71


class Relationships27(BaseModel):
    appStoreVersion: AppStoreVersion4


class Type114(Enum):
    appStoreVersionLocalizations = 'appStoreVersionLocalizations'


class Data70(BaseModel):
    attributes: Attributes32
    relationships: Relationships27
    type: Type114


class AppStoreVersionLocalizationCreateRequest(BaseModel):
    data: Data70


class Attributes33(BaseModel):
    description: Optional[str] = None
    keywords: Optional[str] = None
    marketingUrl: Optional[AnyUrl] = None
    promotionalText: Optional[str] = None
    supportUrl: Optional[AnyUrl] = None
    whatsNew: Optional[str] = None


class Data72(BaseModel):
    attributes: Optional[Attributes33] = None
    id: str
    type: Type114


class AppStoreVersionLocalizationUpdateRequest(BaseModel):
    data: Data72


class Type116(Enum):
    appStoreVersionPhasedReleases = 'appStoreVersionPhasedReleases'


class Type117(Enum):
    appStoreVersions = 'appStoreVersions'


class Data74(BaseModel):
    id: str
    type: Type117


class AppStoreVersion5(BaseModel):
    data: Data74


class Relationships28(BaseModel):
    appStoreVersion: AppStoreVersion5


class Type118(Enum):
    appStoreVersionPhasedReleases = 'appStoreVersionPhasedReleases'


class AppStoreVersionState(Enum):
    DEVELOPER_REMOVED_FROM_SALE = 'DEVELOPER_REMOVED_FROM_SALE'
    DEVELOPER_REJECTED = 'DEVELOPER_REJECTED'
    IN_REVIEW = 'IN_REVIEW'
    INVALID_BINARY = 'INVALID_BINARY'
    METADATA_REJECTED = 'METADATA_REJECTED'
    PENDING_APPLE_RELEASE = 'PENDING_APPLE_RELEASE'
    PENDING_CONTRACT = 'PENDING_CONTRACT'
    PENDING_DEVELOPER_RELEASE = 'PENDING_DEVELOPER_RELEASE'
    PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
    PREORDER_READY_FOR_SALE = 'PREORDER_READY_FOR_SALE'
    PROCESSING_FOR_APP_STORE = 'PROCESSING_FOR_APP_STORE'
    READY_FOR_SALE = 'READY_FOR_SALE'
    REJECTED = 'REJECTED'
    REMOVED_FROM_SALE = 'REMOVED_FROM_SALE'
    WAITING_FOR_EXPORT_COMPLIANCE = 'WAITING_FOR_EXPORT_COMPLIANCE'
    WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
    REPLACED_WITH_NEW_VERSION = 'REPLACED_WITH_NEW_VERSION'


class Type120(Enum):
    appStoreVersions = 'appStoreVersions'


class Data76(BaseModel):
    id: str
    type: Type120


class AppStoreVersion6(BaseModel):
    data: Optional[Data76] = None
    links: Optional[Links] = None


class Relationships29(BaseModel):
    appStoreVersion: Optional[AppStoreVersion6] = None


class Type121(Enum):
    appStoreVersionSubmissions = 'appStoreVersionSubmissions'


class Type122(Enum):
    appStoreVersions = 'appStoreVersions'


class Data78(BaseModel):
    id: str
    type: Type122


class AppStoreVersion7(BaseModel):
    data: Data78


class Relationships30(BaseModel):
    appStoreVersion: AppStoreVersion7


class Type123(Enum):
    appStoreVersionSubmissions = 'appStoreVersionSubmissions'


class Data77(BaseModel):
    relationships: Relationships30
    type: Type123


class AppStoreVersionSubmissionCreateRequest(BaseModel):
    data: Data77


class Attributes37(BaseModel):
    copyright: Optional[str] = None
    downloadable: Optional[bool] = None
    earliestReleaseDate: Optional[datetime] = None
    releaseType: Optional[ReleaseType] = None
    usesIdfa: Optional[bool] = None
    versionString: Optional[str] = None


class Type124(Enum):
    builds = 'builds'


class Data80(BaseModel):
    id: str
    type: Type124


class Build3(BaseModel):
    data: Optional[Data80] = None


class Relationships31(BaseModel):
    build: Optional[Build3] = None


class Type125(Enum):
    appStoreVersions = 'appStoreVersions'


class Data79(BaseModel):
    attributes: Optional[Attributes37] = None
    id: str
    relationships: Optional[Relationships31] = None
    type: Type125


class AppStoreVersionUpdateRequest(BaseModel):
    data: Data79


class Attributes38(BaseModel):
    availableInNewTerritories: Optional[bool] = None
    bundleId: Optional[str] = None
    contentRightsDeclaration: Optional[ContentRightsDeclaration] = None
    primaryLocale: Optional[str] = None


class Type126(Enum):
    territories = 'territories'


class Datum25(BaseModel):
    id: str
    type: Type126


class AvailableTerritories1(BaseModel):
    data: Optional[List[Datum25]] = None


class Type127(Enum):
    appPrices = 'appPrices'


class Datum26(BaseModel):
    id: str
    type: Type127


class Prices1(BaseModel):
    data: Optional[List[Datum26]] = None


class Relationships32(BaseModel):
    availableTerritories: Optional[AvailableTerritories1] = None
    prices: Optional[Prices1] = None


class Type128(Enum):
    apps = 'apps'


class Data81(BaseModel):
    attributes: Optional[Attributes38] = None
    id: str
    relationships: Optional[Relationships32] = None
    type: Type128


class AppUpdateRequest(BaseModel):
    data: Data81


class Attributes39(BaseModel):
    description: Optional[str] = None
    feedbackEmail: Optional[str] = None
    locale: Optional[str] = None
    marketingUrl: Optional[str] = None
    privacyPolicyUrl: Optional[str] = None
    tvOsPrivacyPolicy: Optional[str] = None


class Data82(BaseModel):
    id: str
    type: Type128


class App8(BaseModel):
    data: Optional[Data82] = None
    links: Optional[Links] = None


class Relationships33(BaseModel):
    app: Optional[App8] = None


class Type130(Enum):
    betaAppLocalizations = 'betaAppLocalizations'


class Attributes40(BaseModel):
    description: Optional[str] = None
    feedbackEmail: Optional[str] = None
    locale: str
    marketingUrl: Optional[str] = None
    privacyPolicyUrl: Optional[str] = None
    tvOsPrivacyPolicy: Optional[str] = None


class Type131(Enum):
    apps = 'apps'


class Data84(BaseModel):
    id: str
    type: Type131


class App9(BaseModel):
    data: Data84


class Relationships34(BaseModel):
    app: App9


class Type132(Enum):
    betaAppLocalizations = 'betaAppLocalizations'


class Data83(BaseModel):
    attributes: Attributes40
    relationships: Relationships34
    type: Type132


class BetaAppLocalizationCreateRequest(BaseModel):
    data: Data83


class Attributes41(BaseModel):
    description: Optional[str] = None
    feedbackEmail: Optional[str] = None
    marketingUrl: Optional[str] = None
    privacyPolicyUrl: Optional[str] = None
    tvOsPrivacyPolicy: Optional[str] = None


class Data85(BaseModel):
    attributes: Optional[Attributes41] = None
    id: str
    type: Type132


class BetaAppLocalizationUpdateRequest(BaseModel):
    data: Data85


class Attributes42(BaseModel):
    contactEmail: Optional[str] = None
    contactFirstName: Optional[str] = None
    contactLastName: Optional[str] = None
    contactPhone: Optional[str] = None
    demoAccountName: Optional[str] = None
    demoAccountPassword: Optional[str] = None
    demoAccountRequired: Optional[bool] = None
    notes: Optional[str] = None


class Type134(Enum):
    apps = 'apps'


class Data86(BaseModel):
    id: str
    type: Type134


class App10(BaseModel):
    data: Optional[Data86] = None
    links: Optional[Links] = None


class Relationships35(BaseModel):
    app: Optional[App10] = None


class Type135(Enum):
    betaAppReviewDetails = 'betaAppReviewDetails'


class Data87(BaseModel):
    attributes: Optional[Attributes42] = None
    id: str
    type: Type135


class BetaAppReviewDetailUpdateRequest(BaseModel):
    data: Data87


class Type137(Enum):
    builds = 'builds'


class Data88(BaseModel):
    id: str
    type: Type137


class Build4(BaseModel):
    data: Optional[Data88] = None
    links: Optional[Links] = None


class Relationships36(BaseModel):
    build: Optional[Build4] = None


class Type138(Enum):
    betaAppReviewSubmissions = 'betaAppReviewSubmissions'


class Type139(Enum):
    builds = 'builds'


class Data90(BaseModel):
    id: str
    type: Type139


class Build5(BaseModel):
    data: Data90


class Relationships37(BaseModel):
    build: Build5


class Type140(Enum):
    betaAppReviewSubmissions = 'betaAppReviewSubmissions'


class Data89(BaseModel):
    relationships: Relationships37
    type: Type140


class BetaAppReviewSubmissionCreateRequest(BaseModel):
    data: Data89


class Attributes45(BaseModel):
    locale: Optional[str] = None
    whatsNew: Optional[str] = None


class Type141(Enum):
    builds = 'builds'


class Data91(BaseModel):
    id: str
    type: Type141


class Build6(BaseModel):
    data: Optional[Data91] = None
    links: Optional[Links] = None


class Relationships38(BaseModel):
    build: Optional[Build6] = None


class Type142(Enum):
    betaBuildLocalizations = 'betaBuildLocalizations'


class Attributes46(BaseModel):
    locale: str
    whatsNew: Optional[str] = None


class Type143(Enum):
    builds = 'builds'


class Data93(BaseModel):
    id: str
    type: Type143


class Build7(BaseModel):
    data: Data93


class Relationships39(BaseModel):
    build: Build7


class Type144(Enum):
    betaBuildLocalizations = 'betaBuildLocalizations'


class Data92(BaseModel):
    attributes: Attributes46
    relationships: Relationships39
    type: Type144


class BetaBuildLocalizationCreateRequest(BaseModel):
    data: Data92


class Attributes47(BaseModel):
    whatsNew: Optional[str] = None


class Data94(BaseModel):
    attributes: Optional[Attributes47] = None
    id: str
    type: Type144


class BetaBuildLocalizationUpdateRequest(BaseModel):
    data: Data94


class Attributes48(BaseModel):
    createdDate: Optional[datetime] = None
    feedbackEnabled: Optional[bool] = None
    isInternalGroup: Optional[bool] = None
    name: Optional[str] = None
    publicLink: Optional[str] = None
    publicLinkEnabled: Optional[bool] = None
    publicLinkId: Optional[str] = None
    publicLinkLimit: Optional[int] = None
    publicLinkLimitEnabled: Optional[bool] = None


class Type146(Enum):
    apps = 'apps'


class Data95(BaseModel):
    id: str
    type: Type146


class App11(BaseModel):
    data: Optional[Data95] = None
    links: Optional[Links] = None


class Type147(Enum):
    betaTesters = 'betaTesters'


class Datum27(BaseModel):
    id: str
    type: Type147


class Type148(Enum):
    builds = 'builds'


class Datum28(BaseModel):
    id: str
    type: Type148


class Type149(Enum):
    betaGroups = 'betaGroups'


class Type150(Enum):
    betaTesters = 'betaTesters'


class Datum29(BaseModel):
    id: str
    type: Type150


class BetaGroupBetaTestersLinkagesRequest(BaseModel):
    data: List[Datum29]


class Datum30(BaseModel):
    id: str
    type: Type150


class Type152(Enum):
    builds = 'builds'


class Datum31(BaseModel):
    id: str
    type: Type152


class BetaGroupBuildsLinkagesRequest(BaseModel):
    data: List[Datum31]


class Datum32(BaseModel):
    id: str
    type: Type152


class Attributes49(BaseModel):
    feedbackEnabled: Optional[bool] = None
    name: str
    publicLinkEnabled: Optional[bool] = None
    publicLinkLimit: Optional[int] = None
    publicLinkLimitEnabled: Optional[bool] = None


class Type154(Enum):
    apps = 'apps'


class Data97(BaseModel):
    id: str
    type: Type154


class App12(BaseModel):
    data: Data97


class Type155(Enum):
    betaTesters = 'betaTesters'


class Datum33(BaseModel):
    id: str
    type: Type155


class BetaTesters1(BaseModel):
    data: Optional[List[Datum33]] = None


class Type156(Enum):
    builds = 'builds'


class Datum34(BaseModel):
    id: str
    type: Type156


class Builds2(BaseModel):
    data: Optional[List[Datum34]] = None


class Relationships41(BaseModel):
    app: App12
    betaTesters: Optional[BetaTesters1] = None
    builds: Optional[Builds2] = None


class Type157(Enum):
    betaGroups = 'betaGroups'


class Data96(BaseModel):
    attributes: Attributes49
    relationships: Relationships41
    type: Type157


class BetaGroupCreateRequest(BaseModel):
    data: Data96


class Attributes50(BaseModel):
    feedbackEnabled: Optional[bool] = None
    name: Optional[str] = None
    publicLinkEnabled: Optional[bool] = None
    publicLinkLimit: Optional[int] = None
    publicLinkLimitEnabled: Optional[bool] = None


class Data98(BaseModel):
    attributes: Optional[Attributes50] = None
    id: str
    type: Type157


class BetaGroupUpdateRequest(BaseModel):
    data: Data98


class BetaInviteType(Enum):
    EMAIL = 'EMAIL'
    PUBLIC_LINK = 'PUBLIC_LINK'


class Attributes51(BaseModel):
    agreementText: Optional[str] = None


class Type159(Enum):
    apps = 'apps'


class Data99(BaseModel):
    id: str
    type: Type159


class App13(BaseModel):
    data: Optional[Data99] = None
    links: Optional[Links] = None


class Relationships42(BaseModel):
    app: Optional[App13] = None


class Type160(Enum):
    betaLicenseAgreements = 'betaLicenseAgreements'


class Data100(BaseModel):
    attributes: Optional[Attributes51] = None
    id: str
    type: Type160


class BetaLicenseAgreementUpdateRequest(BaseModel):
    data: Data100


class BetaReviewState(Enum):
    WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
    IN_REVIEW = 'IN_REVIEW'
    REJECTED = 'REJECTED'
    APPROVED = 'APPROVED'


class Attributes53(BaseModel):
    email: Optional[EmailStr] = None
    firstName: Optional[str] = None
    inviteType: Optional[BetaInviteType] = None
    lastName: Optional[str] = None


class Type162(Enum):
    apps = 'apps'


class Datum35(BaseModel):
    id: str
    type: Type162


class Type163(Enum):
    betaGroups = 'betaGroups'


class Datum36(BaseModel):
    id: str
    type: Type163


class Type164(Enum):
    builds = 'builds'


class Datum37(BaseModel):
    id: str
    type: Type164


class Type165(Enum):
    betaTesters = 'betaTesters'


class Type166(Enum):
    apps = 'apps'


class Datum38(BaseModel):
    id: str
    type: Type166


class BetaTesterAppsLinkagesRequest(BaseModel):
    data: List[Datum38]


class Datum39(BaseModel):
    id: str
    type: Type166


class Type168(Enum):
    betaGroups = 'betaGroups'


class Datum40(BaseModel):
    id: str
    type: Type168


class BetaTesterBetaGroupsLinkagesRequest(BaseModel):
    data: List[Datum40]


class Datum41(BaseModel):
    id: str
    type: Type168


class Type170(Enum):
    builds = 'builds'


class Datum42(BaseModel):
    id: str
    type: Type170


class BetaTesterBuildsLinkagesRequest(BaseModel):
    data: List[Datum42]


class Datum43(BaseModel):
    id: str
    type: Type170


class Attributes54(BaseModel):
    email: EmailStr
    firstName: Optional[str] = None
    lastName: Optional[str] = None


class Type172(Enum):
    betaGroups = 'betaGroups'


class Datum44(BaseModel):
    id: str
    type: Type172


class BetaGroups2(BaseModel):
    data: Optional[List[Datum44]] = None


class Type173(Enum):
    builds = 'builds'


class Datum45(BaseModel):
    id: str
    type: Type173


class Builds4(BaseModel):
    data: Optional[List[Datum45]] = None


class Relationships44(BaseModel):
    betaGroups: Optional[BetaGroups2] = None
    builds: Optional[Builds4] = None


class Type174(Enum):
    betaTesters = 'betaTesters'


class Data101(BaseModel):
    attributes: Attributes54
    relationships: Optional[Relationships44] = None
    type: Type174


class BetaTesterCreateRequest(BaseModel):
    data: Data101


class Type175(Enum):
    betaTesterInvitations = 'betaTesterInvitations'


class Type176(Enum):
    apps = 'apps'


class Data103(BaseModel):
    id: str
    type: Type176


class App14(BaseModel):
    data: Data103


class Type177(Enum):
    betaTesters = 'betaTesters'


class Data104(BaseModel):
    id: str
    type: Type177


class BetaTester1(BaseModel):
    data: Data104


class Relationships45(BaseModel):
    app: App14
    betaTester: BetaTester1


class Type178(Enum):
    betaTesterInvitations = 'betaTesterInvitations'


class Data102(BaseModel):
    relationships: Relationships45
    type: Type178


class BetaTesterInvitationCreateRequest(BaseModel):
    data: Data102


class BrazilAgeRating(Enum):
    L = 'L'
    TEN = 'TEN'
    TWELVE = 'TWELVE'
    FOURTEEN = 'FOURTEEN'
    SIXTEEN = 'SIXTEEN'
    EIGHTEEN = 'EIGHTEEN'


class ProcessingState(Enum):
    PROCESSING = 'PROCESSING'
    FAILED = 'FAILED'
    INVALID = 'INVALID'
    VALID = 'VALID'


class Type179(Enum):
    apps = 'apps'


class Data105(BaseModel):
    id: str
    type: Type179


class App15(BaseModel):
    data: Optional[Data105] = None
    links: Optional[Links] = None


class Type180(Enum):
    appEncryptionDeclarations = 'appEncryptionDeclarations'


class Data106(BaseModel):
    id: str
    type: Type180


class AppEncryptionDeclaration1(BaseModel):
    data: Optional[Data106] = None
    links: Optional[Links] = None


class Type181(Enum):
    appStoreVersions = 'appStoreVersions'


class Data107(BaseModel):
    id: str
    type: Type181


class AppStoreVersion8(BaseModel):
    data: Optional[Data107] = None
    links: Optional[Links] = None


class Type182(Enum):
    betaAppReviewSubmissions = 'betaAppReviewSubmissions'


class Data108(BaseModel):
    id: str
    type: Type182


class BetaAppReviewSubmission1(BaseModel):
    data: Optional[Data108] = None
    links: Optional[Links] = None


class Type183(Enum):
    betaBuildLocalizations = 'betaBuildLocalizations'


class Datum46(BaseModel):
    id: str
    type: Type183


class Type184(Enum):
    buildBetaDetails = 'buildBetaDetails'


class Data109(BaseModel):
    id: str
    type: Type184


class BuildBetaDetail(BaseModel):
    data: Optional[Data109] = None
    links: Optional[Links] = None


class Type185(Enum):
    buildIcons = 'buildIcons'


class Datum47(BaseModel):
    id: str
    type: Type185


class Type186(Enum):
    betaTesters = 'betaTesters'


class Datum48(BaseModel):
    id: str
    type: Type186


class Type187(Enum):
    preReleaseVersions = 'preReleaseVersions'


class Data110(BaseModel):
    id: str
    type: Type187


class PreReleaseVersion(BaseModel):
    data: Optional[Data110] = None
    links: Optional[Links] = None


class Type188(Enum):
    builds = 'builds'


class Type189(Enum):
    appEncryptionDeclarations = 'appEncryptionDeclarations'


class Data111(BaseModel):
    id: str
    type: Type189


class BuildAppEncryptionDeclarationLinkageRequest(BaseModel):
    data: Data111


class Data112(BaseModel):
    id: str
    type: Type189


class Type191(Enum):
    builds = 'builds'


class Data113(BaseModel):
    id: str
    type: Type191


class Build8(BaseModel):
    data: Optional[Data113] = None
    links: Optional[Links] = None


class Relationships47(BaseModel):
    build: Optional[Build8] = None


class Type192(Enum):
    buildBetaDetails = 'buildBetaDetails'


class Attributes57(BaseModel):
    autoNotifyEnabled: Optional[bool] = None


class Data114(BaseModel):
    attributes: Optional[Attributes57] = None
    id: str
    type: Type192


class BuildBetaDetailUpdateRequest(BaseModel):
    data: Data114


class Type194(Enum):
    betaGroups = 'betaGroups'


class Datum49(BaseModel):
    id: str
    type: Type194


class BuildBetaGroupsLinkagesRequest(BaseModel):
    data: List[Datum49]


class Type195(Enum):
    buildBetaNotifications = 'buildBetaNotifications'


class Type196(Enum):
    builds = 'builds'


class Data116(BaseModel):
    id: str
    type: Type196


class Build9(BaseModel):
    data: Data116


class Relationships48(BaseModel):
    build: Build9


class Type197(Enum):
    buildBetaNotifications = 'buildBetaNotifications'


class Data115(BaseModel):
    relationships: Relationships48
    type: Type197


class BuildBetaNotificationCreateRequest(BaseModel):
    data: Data115


class Type198(Enum):
    buildIcons = 'buildIcons'


class Type199(Enum):
    betaTesters = 'betaTesters'


class Datum50(BaseModel):
    id: str
    type: Type199


class BuildIndividualTestersLinkagesRequest(BaseModel):
    data: List[Datum50]


class Datum51(BaseModel):
    id: str
    type: Type199


class Attributes59(BaseModel):
    expired: Optional[bool] = None
    usesNonExemptEncryption: Optional[bool] = None


class Type201(Enum):
    appEncryptionDeclarations = 'appEncryptionDeclarations'


class Data118(BaseModel):
    id: str
    type: Type201


class AppEncryptionDeclaration2(BaseModel):
    data: Optional[Data118] = None


class Relationships49(BaseModel):
    appEncryptionDeclaration: Optional[AppEncryptionDeclaration2] = None


class Type202(Enum):
    builds = 'builds'


class Data117(BaseModel):
    attributes: Optional[Attributes59] = None
    id: str
    relationships: Optional[Relationships49] = None
    type: Type202


class BuildUpdateRequest(BaseModel):
    data: Data117


class Type203(Enum):
    apps = 'apps'


class Data119(BaseModel):
    id: str
    type: Type203


class App16(BaseModel):
    data: Optional[Data119] = None
    links: Optional[Links] = None


class Type204(Enum):
    bundleIdCapabilities = 'bundleIdCapabilities'


class Datum52(BaseModel):
    id: str
    type: Type204


class Type205(Enum):
    profiles = 'profiles'


class Datum53(BaseModel):
    id: str
    type: Type205


class Type206(Enum):
    bundleIds = 'bundleIds'


class Type207(Enum):
    bundleIdCapabilities = 'bundleIdCapabilities'


class Type208(Enum):
    bundleIds = 'bundleIds'


class Data121(BaseModel):
    id: str
    type: Type208


class BundleId1(BaseModel):
    data: Data121


class Relationships51(BaseModel):
    bundleId: BundleId1


class Type209(Enum):
    bundleIdCapabilities = 'bundleIdCapabilities'


class Type211(Enum):
    bundleIds = 'bundleIds'


class BundleIdPlatform(Enum):
    IOS = 'IOS'
    MAC_OS = 'MAC_OS'


class Attributes65(BaseModel):
    name: Optional[str] = None


class Data124(BaseModel):
    attributes: Optional[Attributes65] = None
    id: str
    type: Type211


class BundleIdUpdateRequest(BaseModel):
    data: Data124


class Key(Enum):
    XCODE_5 = 'XCODE_5'
    XCODE_6 = 'XCODE_6'
    COMPLETE_PROTECTION = 'COMPLETE_PROTECTION'
    PROTECTED_UNLESS_OPEN = 'PROTECTED_UNLESS_OPEN'
    PROTECTED_UNTIL_FIRST_USER_AUTH = 'PROTECTED_UNTIL_FIRST_USER_AUTH'
    PRIMARY_APP_CONSENT = 'PRIMARY_APP_CONSENT'


class CapabilityOption(BaseModel):
    description: Optional[str] = None
    enabled: Optional[bool] = None
    enabledByDefault: Optional[bool] = None
    key: Optional[Key] = None
    name: Optional[str] = None
    supportsWildcard: Optional[bool] = None


class AllowedInstances(Enum):
    ENTRY = 'ENTRY'
    SINGLE = 'SINGLE'
    MULTIPLE = 'MULTIPLE'


class Key1(Enum):
    ICLOUD_VERSION = 'ICLOUD_VERSION'
    DATA_PROTECTION_PERMISSION_LEVEL = 'DATA_PROTECTION_PERMISSION_LEVEL'
    APPLE_ID_AUTH_APP_CONSENT = 'APPLE_ID_AUTH_APP_CONSENT'


class CapabilitySetting(BaseModel):
    allowedInstances: Optional[AllowedInstances] = None
    description: Optional[str] = None
    enabledByDefault: Optional[bool] = None
    key: Optional[Key1] = None
    minInstances: Optional[int] = None
    name: Optional[str] = None
    options: Optional[List[CapabilityOption]] = None
    visible: Optional[bool] = None


class CapabilityType(Enum):
    ICLOUD = 'ICLOUD'
    IN_APP_PURCHASE = 'IN_APP_PURCHASE'
    GAME_CENTER = 'GAME_CENTER'
    PUSH_NOTIFICATIONS = 'PUSH_NOTIFICATIONS'
    WALLET = 'WALLET'
    INTER_APP_AUDIO = 'INTER_APP_AUDIO'
    MAPS = 'MAPS'
    ASSOCIATED_DOMAINS = 'ASSOCIATED_DOMAINS'
    PERSONAL_VPN = 'PERSONAL_VPN'
    APP_GROUPS = 'APP_GROUPS'
    HEALTHKIT = 'HEALTHKIT'
    HOMEKIT = 'HOMEKIT'
    WIRELESS_ACCESSORY_CONFIGURATION = 'WIRELESS_ACCESSORY_CONFIGURATION'
    APPLE_PAY = 'APPLE_PAY'
    DATA_PROTECTION = 'DATA_PROTECTION'
    SIRIKIT = 'SIRIKIT'
    NETWORK_EXTENSIONS = 'NETWORK_EXTENSIONS'
    MULTIPATH = 'MULTIPATH'
    HOT_SPOT = 'HOT_SPOT'
    NFC_TAG_READING = 'NFC_TAG_READING'
    CLASSKIT = 'CLASSKIT'
    AUTOFILL_CREDENTIAL_PROVIDER = 'AUTOFILL_CREDENTIAL_PROVIDER'
    ACCESS_WIFI_INFORMATION = 'ACCESS_WIFI_INFORMATION'
    NETWORK_CUSTOM_PROTOCOL = 'NETWORK_CUSTOM_PROTOCOL'
    COREMEDIA_HLS_LOW_LATENCY = 'COREMEDIA_HLS_LOW_LATENCY'
    SYSTEM_EXTENSION_INSTALL = 'SYSTEM_EXTENSION_INSTALL'
    USER_MANAGEMENT = 'USER_MANAGEMENT'
    APPLE_ID_AUTH = 'APPLE_ID_AUTH'


class Type213(Enum):
    certificates = 'certificates'


class CertificateType(Enum):
    IOS_DEVELOPMENT = 'IOS_DEVELOPMENT'
    IOS_DISTRIBUTION = 'IOS_DISTRIBUTION'
    MAC_APP_DISTRIBUTION = 'MAC_APP_DISTRIBUTION'
    MAC_INSTALLER_DISTRIBUTION = 'MAC_INSTALLER_DISTRIBUTION'
    MAC_APP_DEVELOPMENT = 'MAC_APP_DEVELOPMENT'
    DEVELOPER_ID_KEXT = 'DEVELOPER_ID_KEXT'
    DEVELOPER_ID_APPLICATION = 'DEVELOPER_ID_APPLICATION'
    DEVELOPMENT = 'DEVELOPMENT'
    DISTRIBUTION = 'DISTRIBUTION'


class DeviceClass(Enum):
    APPLE_WATCH = 'APPLE_WATCH'
    IPAD = 'IPAD'
    IPHONE = 'IPHONE'
    IPOD = 'IPOD'
    APPLE_TV = 'APPLE_TV'
    MAC = 'MAC'


class Status(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class Attributes68(BaseModel):
    addedDate: Optional[datetime] = None
    deviceClass: Optional[DeviceClass] = None
    model: Optional[str] = None
    name: Optional[str] = None
    platform: Optional[BundleIdPlatform] = None
    status: Optional[Status] = None
    udid: Optional[str] = None


class Type215(Enum):
    devices = 'devices'


class Attributes69(BaseModel):
    name: str
    platform: BundleIdPlatform
    udid: str


class Data126(BaseModel):
    attributes: Attributes69
    type: Type215


class DeviceCreateRequest(BaseModel):
    data: Data126


class Attributes70(BaseModel):
    name: Optional[str] = None
    status: Optional[Status] = None


class Data127(BaseModel):
    attributes: Optional[Attributes70] = None
    id: str
    type: Type215


class DeviceUpdateRequest(BaseModel):
    data: Data127


class Type218(Enum):
    diagnosticLogs = 'diagnosticLogs'


class DiagnosticType(Enum):
    DISK_WRITES = 'DISK_WRITES'


class Attributes71(BaseModel):
    diagnosticType: Optional[DiagnosticType] = None
    signature: Optional[str] = None
    weight: Optional[float] = None


class Type219(Enum):
    diagnosticSignatures = 'diagnosticSignatures'


class DocumentLinks(BaseModel):
    self: str


class Attributes72(BaseModel):
    agreementText: Optional[str] = None


class Type220(Enum):
    apps = 'apps'


class Data128(BaseModel):
    id: str
    type: Type220


class App17(BaseModel):
    data: Optional[Data128] = None
    links: Optional[Links] = None


class Type221(Enum):
    territories = 'territories'


class Datum54(BaseModel):
    id: str
    type: Type221


class Type222(Enum):
    endUserLicenseAgreements = 'endUserLicenseAgreements'


class Attributes73(BaseModel):
    agreementText: str


class Type223(Enum):
    apps = 'apps'


class Data130(BaseModel):
    id: str
    type: Type223


class App18(BaseModel):
    data: Data130


class Type224(Enum):
    territories = 'territories'


class Datum55(BaseModel):
    id: str
    type: Type224


class Territories1(BaseModel):
    data: List[Datum55]


class Relationships53(BaseModel):
    app: App18
    territories: Territories1


class Type225(Enum):
    endUserLicenseAgreements = 'endUserLicenseAgreements'


class Data129(BaseModel):
    attributes: Attributes73
    relationships: Relationships53
    type: Type225


class EndUserLicenseAgreementCreateRequest(BaseModel):
    data: Data129


class Attributes74(BaseModel):
    agreementText: Optional[str] = None


class Type226(Enum):
    territories = 'territories'


class Datum56(BaseModel):
    id: str
    type: Type226


class Territories2(BaseModel):
    data: Optional[List[Datum56]] = None


class Relationships54(BaseModel):
    territories: Optional[Territories2] = None


class Type227(Enum):
    endUserLicenseAgreements = 'endUserLicenseAgreements'


class Data131(BaseModel):
    attributes: Optional[Attributes74] = None
    id: str
    relationships: Optional[Relationships54] = None
    type: Type227


class EndUserLicenseAgreementUpdateRequest(BaseModel):
    data: Data131


class Source(BaseModel):
    pointer: Optional[str] = None


class Source1(BaseModel):
    parameter: Optional[str] = None


class Error(BaseModel):
    code: str
    detail: str
    id: Optional[str] = None
    source: Optional[Union[Source, Source1]] = None
    status: str
    title: str


class ErrorResponse(BaseModel):
    errors: Optional[List[Error]] = None


class ExternalBetaState(Enum):
    PROCESSING = 'PROCESSING'
    PROCESSING_EXCEPTION = 'PROCESSING_EXCEPTION'
    MISSING_EXPORT_COMPLIANCE = 'MISSING_EXPORT_COMPLIANCE'
    READY_FOR_BETA_TESTING = 'READY_FOR_BETA_TESTING'
    IN_BETA_TESTING = 'IN_BETA_TESTING'
    EXPIRED = 'EXPIRED'
    READY_FOR_BETA_SUBMISSION = 'READY_FOR_BETA_SUBMISSION'
    IN_EXPORT_COMPLIANCE_REVIEW = 'IN_EXPORT_COMPLIANCE_REVIEW'
    WAITING_FOR_BETA_REVIEW = 'WAITING_FOR_BETA_REVIEW'
    IN_BETA_REVIEW = 'IN_BETA_REVIEW'
    BETA_REJECTED = 'BETA_REJECTED'
    BETA_APPROVED = 'BETA_APPROVED'


class Type228(Enum):
    apps = 'apps'


class Data132(BaseModel):
    id: str
    type: Type228


class App19(BaseModel):
    data: Optional[Data132] = None
    links: Optional[Links] = None


class Type229(Enum):
    gameCenterEnabledVersions = 'gameCenterEnabledVersions'


class Datum57(BaseModel):
    id: str
    type: Type229


class Datum58(BaseModel):
    id: str
    type: Type229


class GameCenterEnabledVersionCompatibleVersionsLinkagesRequest(BaseModel):
    data: List[Datum58]


class Datum59(BaseModel):
    id: str
    type: Type229


class IconAssetType(Enum):
    APP_STORE = 'APP_STORE'
    MESSAGES_APP_STORE = 'MESSAGES_APP_STORE'
    WATCH_APP_STORE = 'WATCH_APP_STORE'
    TV_OS_HOME_SCREEN = 'TV_OS_HOME_SCREEN'
    TV_OS_TOP_SHELF = 'TV_OS_TOP_SHELF'


class Attributes76(BaseModel):
    attributesActionWithPreviousAd: Optional[bool] = None
    attributesAppInstallationToPreviousAd: Optional[bool] = None
    honorsLimitedAdTracking: Optional[bool] = None
    servesAds: Optional[bool] = None


class Type233(Enum):
    appStoreVersions = 'appStoreVersions'


class Data133(BaseModel):
    id: str
    type: Type233


class AppStoreVersion9(BaseModel):
    data: Optional[Data133] = None
    links: Optional[Links] = None


class Relationships56(BaseModel):
    appStoreVersion: Optional[AppStoreVersion9] = None


class Type234(Enum):
    idfaDeclarations = 'idfaDeclarations'


class Attributes77(BaseModel):
    attributesActionWithPreviousAd: bool
    attributesAppInstallationToPreviousAd: bool
    honorsLimitedAdTracking: bool
    servesAds: bool


class Type235(Enum):
    appStoreVersions = 'appStoreVersions'


class Data135(BaseModel):
    id: str
    type: Type235


class AppStoreVersion10(BaseModel):
    data: Data135


class Relationships57(BaseModel):
    appStoreVersion: AppStoreVersion10


class Type236(Enum):
    idfaDeclarations = 'idfaDeclarations'


class Data134(BaseModel):
    attributes: Attributes77
    relationships: Relationships57
    type: Type236


class IdfaDeclarationCreateRequest(BaseModel):
    data: Data134


class Attributes78(BaseModel):
    attributesActionWithPreviousAd: Optional[bool] = None
    attributesAppInstallationToPreviousAd: Optional[bool] = None
    honorsLimitedAdTracking: Optional[bool] = None
    servesAds: Optional[bool] = None


class Data136(BaseModel):
    attributes: Optional[Attributes78] = None
    id: str
    type: Type236


class IdfaDeclarationUpdateRequest(BaseModel):
    data: Data136


class ImageAsset(BaseModel):
    height: Optional[int] = None
    templateUrl: Optional[str] = None
    width: Optional[int] = None


class InAppPurchaseType(Enum):
    AUTOMATICALLY_RENEWABLE_SUBSCRIPTION = 'AUTOMATICALLY_RENEWABLE_SUBSCRIPTION'
    NON_CONSUMABLE = 'NON_CONSUMABLE'
    CONSUMABLE = 'CONSUMABLE'
    NON_RENEWING_SUBSCRIPTION = 'NON_RENEWING_SUBSCRIPTION'
    FREE_SUBSCRIPTION = 'FREE_SUBSCRIPTION'


class State1(Enum):
    CREATED = 'CREATED'
    DEVELOPER_SIGNED_OFF = 'DEVELOPER_SIGNED_OFF'
    DEVELOPER_ACTION_NEEDED = 'DEVELOPER_ACTION_NEEDED'
    DELETION_IN_PROGRESS = 'DELETION_IN_PROGRESS'
    APPROVED = 'APPROVED'
    DELETED = 'DELETED'
    REMOVED_FROM_SALE = 'REMOVED_FROM_SALE'
    DEVELOPER_REMOVED_FROM_SALE = 'DEVELOPER_REMOVED_FROM_SALE'
    WAITING_FOR_UPLOAD = 'WAITING_FOR_UPLOAD'
    PROCESSING_CONTENT = 'PROCESSING_CONTENT'
    REPLACED = 'REPLACED'
    REJECTED = 'REJECTED'
    WAITING_FOR_SCREENSHOT = 'WAITING_FOR_SCREENSHOT'
    PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
    MISSING_METADATA = 'MISSING_METADATA'
    READY_TO_SUBMIT = 'READY_TO_SUBMIT'
    WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
    IN_REVIEW = 'IN_REVIEW'
    PENDING_DEVELOPER_RELEASE = 'PENDING_DEVELOPER_RELEASE'


class Attributes79(BaseModel):
    inAppPurchaseType: Optional[InAppPurchaseType] = None
    productId: Optional[str] = None
    referenceName: Optional[str] = None
    state: Optional[State1] = None


class Type238(Enum):
    apps = 'apps'


class Datum60(BaseModel):
    id: str
    type: Type238


class Type239(Enum):
    inAppPurchases = 'inAppPurchases'


class InternalBetaState(Enum):
    PROCESSING = 'PROCESSING'
    PROCESSING_EXCEPTION = 'PROCESSING_EXCEPTION'
    MISSING_EXPORT_COMPLIANCE = 'MISSING_EXPORT_COMPLIANCE'
    READY_FOR_BETA_TESTING = 'READY_FOR_BETA_TESTING'
    IN_BETA_TESTING = 'IN_BETA_TESTING'
    EXPIRED = 'EXPIRED'
    IN_EXPORT_COMPLIANCE_REVIEW = 'IN_EXPORT_COMPLIANCE_REVIEW'


class KidsAgeBand(Enum):
    FIVE_AND_UNDER = 'FIVE_AND_UNDER'
    SIX_TO_EIGHT = 'SIX_TO_EIGHT'
    NINE_TO_ELEVEN = 'NINE_TO_ELEVEN'


class PagedDocumentLinks(BaseModel):
    first: Optional[str] = None
    next: Optional[str] = None
    self: str


class Paging(BaseModel):
    limit: int
    total: int


class PagingInformation(BaseModel):
    paging: Paging


class MetricType(Enum):
    DISK = 'DISK'
    HANG = 'HANG'
    BATTERY = 'BATTERY'
    LAUNCH = 'LAUNCH'
    MEMORY = 'MEMORY'
    ANIMATION = 'ANIMATION'
    TERMINATION = 'TERMINATION'


class Platform1(Enum):
    IOS = 'IOS'


class Attributes80(BaseModel):
    deviceType: Optional[str] = None
    metricType: Optional[MetricType] = None
    platform: Optional[Platform1] = None


class Type240(Enum):
    perfPowerMetrics = 'perfPowerMetrics'


class PhasedReleaseState(Enum):
    INACTIVE = 'INACTIVE'
    ACTIVE = 'ACTIVE'
    PAUSED = 'PAUSED'
    COMPLETE = 'COMPLETE'


class Platform(Enum):
    IOS = 'IOS'
    MAC_OS = 'MAC_OS'
    TV_OS = 'TV_OS'


class Attributes81(BaseModel):
    platform: Optional[Platform] = None
    version: Optional[str] = None


class Type241(Enum):
    apps = 'apps'


class Data137(BaseModel):
    id: str
    type: Type241


class App20(BaseModel):
    data: Optional[Data137] = None
    links: Optional[Links] = None


class Type242(Enum):
    builds = 'builds'


class Datum61(BaseModel):
    id: str
    type: Type242


class Builds5(BaseModel):
    data: Optional[List[Datum61]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships59(BaseModel):
    app: Optional[App20] = None
    builds: Optional[Builds5] = None


class Type243(Enum):
    preReleaseVersions = 'preReleaseVersions'


class PreviewType(Enum):
    IPHONE_65 = 'IPHONE_65'
    IPHONE_58 = 'IPHONE_58'
    IPHONE_55 = 'IPHONE_55'
    IPHONE_47 = 'IPHONE_47'
    IPHONE_40 = 'IPHONE_40'
    IPHONE_35 = 'IPHONE_35'
    IPAD_PRO_3GEN_129 = 'IPAD_PRO_3GEN_129'
    IPAD_PRO_3GEN_11 = 'IPAD_PRO_3GEN_11'
    IPAD_PRO_129 = 'IPAD_PRO_129'
    IPAD_105 = 'IPAD_105'
    IPAD_97 = 'IPAD_97'
    DESKTOP = 'DESKTOP'
    WATCH_SERIES_4 = 'WATCH_SERIES_4'
    WATCH_SERIES_3 = 'WATCH_SERIES_3'
    APPLE_TV = 'APPLE_TV'


class ProfileState(Enum):
    ACTIVE = 'ACTIVE'
    INVALID = 'INVALID'


class ProfileType(Enum):
    IOS_APP_DEVELOPMENT = 'IOS_APP_DEVELOPMENT'
    IOS_APP_STORE = 'IOS_APP_STORE'
    IOS_APP_ADHOC = 'IOS_APP_ADHOC'
    IOS_APP_INHOUSE = 'IOS_APP_INHOUSE'
    MAC_APP_DEVELOPMENT = 'MAC_APP_DEVELOPMENT'
    MAC_APP_STORE = 'MAC_APP_STORE'
    MAC_APP_DIRECT = 'MAC_APP_DIRECT'
    TVOS_APP_DEVELOPMENT = 'TVOS_APP_DEVELOPMENT'
    TVOS_APP_STORE = 'TVOS_APP_STORE'
    TVOS_APP_ADHOC = 'TVOS_APP_ADHOC'
    TVOS_APP_INHOUSE = 'TVOS_APP_INHOUSE'
    MAC_CATALYST_APP_DEVELOPMENT = 'MAC_CATALYST_APP_DEVELOPMENT'
    MAC_CATALYST_APP_STORE = 'MAC_CATALYST_APP_STORE'
    MAC_CATALYST_APP_DIRECT = 'MAC_CATALYST_APP_DIRECT'


class Attributes82(BaseModel):
    createdDate: Optional[datetime] = None
    expirationDate: Optional[datetime] = None
    name: Optional[str] = None
    platform: Optional[BundleIdPlatform] = None
    profileContent: Optional[str] = None
    profileState: Optional[ProfileState] = None
    profileType: Optional[ProfileType] = None
    uuid: Optional[str] = None


class Type244(Enum):
    bundleIds = 'bundleIds'


class Data138(BaseModel):
    id: str
    type: Type244


class BundleId2(BaseModel):
    data: Optional[Data138] = None
    links: Optional[Links] = None


class Type245(Enum):
    certificates = 'certificates'


class Datum62(BaseModel):
    id: str
    type: Type245


class Certificates(BaseModel):
    data: Optional[List[Datum62]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Type246(Enum):
    devices = 'devices'


class Datum63(BaseModel):
    id: str
    type: Type246


class Devices(BaseModel):
    data: Optional[List[Datum63]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships60(BaseModel):
    bundleId: Optional[BundleId2] = None
    certificates: Optional[Certificates] = None
    devices: Optional[Devices] = None


class Type247(Enum):
    profiles = 'profiles'


class Attributes83(BaseModel):
    name: str
    profileType: ProfileType


class Type248(Enum):
    bundleIds = 'bundleIds'


class Data140(BaseModel):
    id: str
    type: Type248


class BundleId3(BaseModel):
    data: Data140


class Type249(Enum):
    certificates = 'certificates'


class Datum64(BaseModel):
    id: str
    type: Type249


class Certificates1(BaseModel):
    data: List[Datum64]


class Type250(Enum):
    devices = 'devices'


class Datum65(BaseModel):
    id: str
    type: Type250


class Devices1(BaseModel):
    data: Optional[List[Datum65]] = None


class Relationships61(BaseModel):
    bundleId: BundleId3
    certificates: Certificates1
    devices: Optional[Devices1] = None


class Type251(Enum):
    profiles = 'profiles'


class Data139(BaseModel):
    attributes: Attributes83
    relationships: Relationships61
    type: Type251


class ProfileCreateRequest(BaseModel):
    data: Data139


class ResourceLinks(BaseModel):
    self: str


class Type252(Enum):
    appStoreVersions = 'appStoreVersions'


class Data141(BaseModel):
    id: str
    type: Type252


class AppStoreVersion11(BaseModel):
    data: Optional[Data141] = None
    links: Optional[Links] = None


class Relationships62(BaseModel):
    appStoreVersion: Optional[AppStoreVersion11] = None


class Type253(Enum):
    routingAppCoverages = 'routingAppCoverages'


class Attributes85(BaseModel):
    fileName: str
    fileSize: int


class Type254(Enum):
    appStoreVersions = 'appStoreVersions'


class Data143(BaseModel):
    id: str
    type: Type254


class AppStoreVersion12(BaseModel):
    data: Data143


class Relationships63(BaseModel):
    appStoreVersion: AppStoreVersion12


class Type255(Enum):
    routingAppCoverages = 'routingAppCoverages'


class Data142(BaseModel):
    attributes: Attributes85
    relationships: Relationships63
    type: Type255


class RoutingAppCoverageCreateRequest(BaseModel):
    data: Data142


class Attributes86(BaseModel):
    sourceFileChecksum: Optional[str] = None
    uploaded: Optional[bool] = None


class Data144(BaseModel):
    attributes: Optional[Attributes86] = None
    id: str
    type: Type255


class RoutingAppCoverageUpdateRequest(BaseModel):
    data: Data144


class ScreenshotDisplayType(Enum):
    APP_IPHONE_65 = 'APP_IPHONE_65'
    APP_IPHONE_58 = 'APP_IPHONE_58'
    APP_IPHONE_55 = 'APP_IPHONE_55'
    APP_IPHONE_47 = 'APP_IPHONE_47'
    APP_IPHONE_40 = 'APP_IPHONE_40'
    APP_IPHONE_35 = 'APP_IPHONE_35'
    APP_IPAD_PRO_3GEN_129 = 'APP_IPAD_PRO_3GEN_129'
    APP_IPAD_PRO_3GEN_11 = 'APP_IPAD_PRO_3GEN_11'
    APP_IPAD_PRO_129 = 'APP_IPAD_PRO_129'
    APP_IPAD_105 = 'APP_IPAD_105'
    APP_IPAD_97 = 'APP_IPAD_97'
    APP_DESKTOP = 'APP_DESKTOP'
    APP_WATCH_SERIES_4 = 'APP_WATCH_SERIES_4'
    APP_WATCH_SERIES_3 = 'APP_WATCH_SERIES_3'
    APP_APPLE_TV = 'APP_APPLE_TV'
    IMESSAGE_APP_IPHONE_65 = 'IMESSAGE_APP_IPHONE_65'
    IMESSAGE_APP_IPHONE_58 = 'IMESSAGE_APP_IPHONE_58'
    IMESSAGE_APP_IPHONE_55 = 'IMESSAGE_APP_IPHONE_55'
    IMESSAGE_APP_IPHONE_47 = 'IMESSAGE_APP_IPHONE_47'
    IMESSAGE_APP_IPHONE_40 = 'IMESSAGE_APP_IPHONE_40'
    IMESSAGE_APP_IPAD_PRO_3GEN_129 = 'IMESSAGE_APP_IPAD_PRO_3GEN_129'
    IMESSAGE_APP_IPAD_PRO_3GEN_11 = 'IMESSAGE_APP_IPAD_PRO_3GEN_11'
    IMESSAGE_APP_IPAD_PRO_129 = 'IMESSAGE_APP_IPAD_PRO_129'
    IMESSAGE_APP_IPAD_105 = 'IMESSAGE_APP_IPAD_105'
    IMESSAGE_APP_IPAD_97 = 'IMESSAGE_APP_IPAD_97'


class Attributes87(BaseModel):
    currency: Optional[str] = None


class Type257(Enum):
    territories = 'territories'


class TerritoryModel(BaseModel):
    attributes: Optional[Attributes87] = None
    id: str
    links: ResourceLinks
    type: Type257


class TerritoryResponse(BaseModel):
    data: TerritoryModel
    links: DocumentLinks


class UploadOperationHeader(BaseModel):
    name: Optional[str] = None
    value: Optional[str] = None


class Type258(Enum):
    apps = 'apps'


class Datum66(BaseModel):
    id: str
    type: Type258


class VisibleApps(BaseModel):
    data: Optional[List[Datum66]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships64(BaseModel):
    visibleApps: Optional[VisibleApps] = None


class Type259(Enum):
    users = 'users'


class Type260(Enum):
    apps = 'apps'


class Datum67(BaseModel):
    id: str
    type: Type260


class VisibleApps1(BaseModel):
    data: Optional[List[Datum67]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships65(BaseModel):
    visibleApps: Optional[VisibleApps1] = None


class Type261(Enum):
    userInvitations = 'userInvitations'


class Type262(Enum):
    apps = 'apps'


class Datum68(BaseModel):
    id: str
    type: Type262


class VisibleApps2(BaseModel):
    data: Optional[List[Datum68]] = None


class Relationships66(BaseModel):
    visibleApps: Optional[VisibleApps2] = None


class Type263(Enum):
    userInvitations = 'userInvitations'


class UserRole(Enum):
    ADMIN = 'ADMIN'
    FINANCE = 'FINANCE'
    TECHNICAL = 'TECHNICAL'
    ACCOUNT_HOLDER = 'ACCOUNT_HOLDER'
    READ_ONLY = 'READ_ONLY'
    SALES = 'SALES'
    MARKETING = 'MARKETING'
    APP_MANAGER = 'APP_MANAGER'
    DEVELOPER = 'DEVELOPER'
    ACCESS_TO_REPORTS = 'ACCESS_TO_REPORTS'
    CUSTOMER_SUPPORT = 'CUSTOMER_SUPPORT'
    CREATE_APPS = 'CREATE_APPS'
    CLOUD_MANAGED_DEVELOPER_ID = 'CLOUD_MANAGED_DEVELOPER_ID'
    CLOUD_MANAGED_APP_DISTRIBUTION = 'CLOUD_MANAGED_APP_DISTRIBUTION'


class Attributes91(BaseModel):
    allAppsVisible: Optional[bool] = None
    provisioningAllowed: Optional[bool] = None
    roles: Optional[List[UserRole]] = None


class Type264(Enum):
    apps = 'apps'


class Datum69(BaseModel):
    id: str
    type: Type264


class VisibleApps3(BaseModel):
    data: Optional[List[Datum69]] = None


class Relationships67(BaseModel):
    visibleApps: Optional[VisibleApps3] = None


class Type265(Enum):
    users = 'users'


class Data146(BaseModel):
    attributes: Optional[Attributes91] = None
    id: str
    relationships: Optional[Relationships67] = None
    type: Type265


class UserUpdateRequest(BaseModel):
    data: Data146


class Type266(Enum):
    apps = 'apps'


class Datum70(BaseModel):
    id: str
    type: Type266


class UserVisibleAppsLinkagesRequest(BaseModel):
    data: List[Datum70]


class Datum71(BaseModel):
    id: str
    type: Type266


class UserVisibleAppsLinkagesResponse(BaseModel):
    data: List[Datum71]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class FilterPlatform(Enum):
    IOS = 'IOS'
    MAC_OS = 'MAC_OS'
    TV_OS = 'TV_OS'


class FieldsAppCategory(Enum):
    parent = 'parent'
    platforms = 'platforms'
    subcategories = 'subcategories'


class IncludeEnum(Enum):
    parent = 'parent'
    subcategories = 'subcategories'


class FilterPlatforms(RootModel[List[FilterPlatform]]):
    root: List[FilterPlatform]


class ExistsParent(RootModel[List[str]]):
    root: List[str]


class FieldsAppCategories(RootModel[List[FieldsAppCategory]]):
    root: List[FieldsAppCategory]


class Include(RootModel[List[IncludeEnum]]):
    root: List[IncludeEnum]


class FieldsAppCategories1(RootModel[List[FieldsAppCategory]]):
    root: List[FieldsAppCategory]


class Include1(RootModel[List[IncludeEnum]]):
    root: List[IncludeEnum]


class FieldsAppCategories2(RootModel[List[FieldsAppCategory]]):
    root: List[FieldsAppCategory]


class FieldsAppCategories3(RootModel[List[FieldsAppCategory]]):
    root: List[FieldsAppCategory]


class FilterPlatformEnum(Enum):
    IOS = 'IOS'
    MAC_OS = 'MAC_OS'
    TV_OS = 'TV_OS'


class FieldsAppEncryptionDeclaration(Enum):
    app = 'app'
    appEncryptionDeclarationState = 'appEncryptionDeclarationState'
    availableOnFrenchStore = 'availableOnFrenchStore'
    builds = 'builds'
    codeValue = 'codeValue'
    containsProprietaryCryptography = 'containsProprietaryCryptography'
    containsThirdPartyCryptography = 'containsThirdPartyCryptography'
    documentName = 'documentName'
    documentType = 'documentType'
    documentUrl = 'documentUrl'
    exempt = 'exempt'
    platform = 'platform'
    uploadedDate = 'uploadedDate'
    usesEncryption = 'usesEncryption'


class IncludeEnum4(Enum):
    app = 'app'


class FieldsApp(Enum):
    appInfos = 'appInfos'
    appStoreVersions = 'appStoreVersions'
    availableInNewTerritories = 'availableInNewTerritories'
    availableTerritories = 'availableTerritories'
    betaAppLocalizations = 'betaAppLocalizations'
    betaAppReviewDetail = 'betaAppReviewDetail'
    betaGroups = 'betaGroups'
    betaLicenseAgreement = 'betaLicenseAgreement'
    betaTesters = 'betaTesters'
    builds = 'builds'
    bundleId = 'bundleId'
    contentRightsDeclaration = 'contentRightsDeclaration'
    endUserLicenseAgreement = 'endUserLicenseAgreement'
    gameCenterEnabledVersions = 'gameCenterEnabledVersions'
    inAppPurchases = 'inAppPurchases'
    isOrEverWasMadeForKids = 'isOrEverWasMadeForKids'
    name = 'name'
    perfPowerMetrics = 'perfPowerMetrics'
    preOrder = 'preOrder'
    preReleaseVersions = 'preReleaseVersions'
    prices = 'prices'
    primaryLocale = 'primaryLocale'
    sku = 'sku'


class FilterPlatform2(RootModel[List[FilterPlatformEnum]]):
    root: List[FilterPlatformEnum]


class FilterApp(RootModel[List[str]]):
    root: List[str]


class FilterBuilds(RootModel[List[str]]):
    root: List[str]


class FieldsAppEncryptionDeclarations(RootModel[List[FieldsAppEncryptionDeclaration]]):
    root: List[FieldsAppEncryptionDeclaration]


class Include2(RootModel[List[IncludeEnum4]]):
    root: List[IncludeEnum4]


class FieldsApps(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsAppEncryptionDeclarations1(RootModel[List[FieldsAppEncryptionDeclaration]]):
    root: List[FieldsAppEncryptionDeclaration]


class Include3(RootModel[List[IncludeEnum4]]):
    root: List[IncludeEnum4]


class FieldsApps1(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsApps2(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsAppInfoLocalization(Enum):
    appInfo = 'appInfo'
    locale = 'locale'
    name = 'name'
    privacyPolicyText = 'privacyPolicyText'
    privacyPolicyUrl = 'privacyPolicyUrl'
    subtitle = 'subtitle'


class IncludeEnum8(Enum):
    appInfo = 'appInfo'


class FieldsAppInfoLocalizations(RootModel[List[FieldsAppInfoLocalization]]):
    root: List[FieldsAppInfoLocalization]


class Include4(RootModel[List[IncludeEnum8]]):
    root: List[IncludeEnum8]


class FieldsAppInfo(Enum):
    ageRatingDeclaration = 'ageRatingDeclaration'
    app = 'app'
    appInfoLocalizations = 'appInfoLocalizations'
    appStoreAgeRating = 'appStoreAgeRating'
    appStoreState = 'appStoreState'
    brazilAgeRating = 'brazilAgeRating'
    kidsAgeBand = 'kidsAgeBand'
    primaryCategory = 'primaryCategory'
    primarySubcategoryOne = 'primarySubcategoryOne'
    primarySubcategoryTwo = 'primarySubcategoryTwo'
    secondaryCategory = 'secondaryCategory'
    secondarySubcategoryOne = 'secondarySubcategoryOne'
    secondarySubcategoryTwo = 'secondarySubcategoryTwo'


class IncludeEnum10(Enum):
    ageRatingDeclaration = 'ageRatingDeclaration'
    app = 'app'
    appInfoLocalizations = 'appInfoLocalizations'
    primaryCategory = 'primaryCategory'
    primarySubcategoryOne = 'primarySubcategoryOne'
    primarySubcategoryTwo = 'primarySubcategoryTwo'
    secondaryCategory = 'secondaryCategory'
    secondarySubcategoryOne = 'secondarySubcategoryOne'
    secondarySubcategoryTwo = 'secondarySubcategoryTwo'


class FieldsAgeRatingDeclaration(Enum):
    alcoholTobaccoOrDrugUseOrReferences = 'alcoholTobaccoOrDrugUseOrReferences'
    contests = 'contests'
    gambling = 'gambling'
    gamblingAndContests = 'gamblingAndContests'
    gamblingSimulated = 'gamblingSimulated'
    horrorOrFearThemes = 'horrorOrFearThemes'
    kidsAgeBand = 'kidsAgeBand'
    matureOrSuggestiveThemes = 'matureOrSuggestiveThemes'
    medicalOrTreatmentInformation = 'medicalOrTreatmentInformation'
    profanityOrCrudeHumor = 'profanityOrCrudeHumor'
    seventeenPlus = 'seventeenPlus'
    sexualContentGraphicAndNudity = 'sexualContentGraphicAndNudity'
    sexualContentOrNudity = 'sexualContentOrNudity'
    unrestrictedWebAccess = 'unrestrictedWebAccess'
    violenceCartoonOrFantasy = 'violenceCartoonOrFantasy'
    violenceRealistic = 'violenceRealistic'
    violenceRealisticProlongedGraphicOrSadistic = (
        'violenceRealisticProlongedGraphicOrSadistic'
    )


class FieldsAppInfos(RootModel[List[FieldsAppInfo]]):
    root: List[FieldsAppInfo]


class Include5(RootModel[List[IncludeEnum10]]):
    root: List[IncludeEnum10]


class FieldsAgeRatingDeclarations(RootModel[List[FieldsAgeRatingDeclaration]]):
    root: List[FieldsAgeRatingDeclaration]


class FieldsAppCategories4(RootModel[List[FieldsAppCategory]]):
    root: List[FieldsAppCategory]


class FieldsAppInfoLocalizations1(RootModel[List[FieldsAppInfoLocalization]]):
    root: List[FieldsAppInfoLocalization]


class FieldsAgeRatingDeclarations1(RootModel[List[FieldsAgeRatingDeclaration]]):
    root: List[FieldsAgeRatingDeclaration]


class IncludeEnum12(Enum):
    appInfo = 'appInfo'


class FilterLocale(RootModel[List[str]]):
    root: List[str]


class FieldsAppInfos1(RootModel[List[FieldsAppInfo]]):
    root: List[FieldsAppInfo]


class FieldsAppInfoLocalizations2(RootModel[List[FieldsAppInfoLocalization]]):
    root: List[FieldsAppInfoLocalization]


class Include6(RootModel[List[IncludeEnum12]]):
    root: List[IncludeEnum12]


class FieldsAppCategories5(RootModel[List[FieldsAppCategory]]):
    root: List[FieldsAppCategory]


class FieldsAppCategories6(RootModel[List[FieldsAppCategory]]):
    root: List[FieldsAppCategory]


class FieldsAppCategories7(RootModel[List[FieldsAppCategory]]):
    root: List[FieldsAppCategory]


class FieldsAppCategories8(RootModel[List[FieldsAppCategory]]):
    root: List[FieldsAppCategory]


class FieldsAppCategories9(RootModel[List[FieldsAppCategory]]):
    root: List[FieldsAppCategory]


class FieldsAppCategories10(RootModel[List[FieldsAppCategory]]):
    root: List[FieldsAppCategory]


class FieldsAppPreOrder(Enum):
    app = 'app'
    appReleaseDate = 'appReleaseDate'
    preOrderAvailableDate = 'preOrderAvailableDate'


class IncludeEnum14(Enum):
    app = 'app'


class FieldsAppPreOrders(RootModel[List[FieldsAppPreOrder]]):
    root: List[FieldsAppPreOrder]


class Include7(RootModel[List[IncludeEnum14]]):
    root: List[IncludeEnum14]


class FieldsAppPreviewSet(Enum):
    appPreviews = 'appPreviews'
    appStoreVersionLocalization = 'appStoreVersionLocalization'
    previewType = 'previewType'


class IncludeEnum16(Enum):
    appPreviews = 'appPreviews'
    appStoreVersionLocalization = 'appStoreVersionLocalization'


class FieldsAppPreview(Enum):
    appPreviewSet = 'appPreviewSet'
    assetDeliveryState = 'assetDeliveryState'
    fileName = 'fileName'
    fileSize = 'fileSize'
    mimeType = 'mimeType'
    previewFrameTimeCode = 'previewFrameTimeCode'
    previewImage = 'previewImage'
    sourceFileChecksum = 'sourceFileChecksum'
    uploadOperations = 'uploadOperations'
    uploaded = 'uploaded'
    videoUrl = 'videoUrl'


class FieldsAppPreviewSets(RootModel[List[FieldsAppPreviewSet]]):
    root: List[FieldsAppPreviewSet]


class Include8(RootModel[List[IncludeEnum16]]):
    root: List[IncludeEnum16]


class FieldsAppPreviews(RootModel[List[FieldsAppPreview]]):
    root: List[FieldsAppPreview]


class IncludeEnum18(Enum):
    appPreviewSet = 'appPreviewSet'


class FieldsAppPreviews1(RootModel[List[FieldsAppPreview]]):
    root: List[FieldsAppPreview]


class FieldsAppPreviewSets1(RootModel[List[FieldsAppPreviewSet]]):
    root: List[FieldsAppPreviewSet]


class Include9(RootModel[List[IncludeEnum18]]):
    root: List[IncludeEnum18]


class FieldsAppPreviews2(RootModel[List[FieldsAppPreview]]):
    root: List[FieldsAppPreview]


class Include10(RootModel[List[IncludeEnum18]]):
    root: List[IncludeEnum18]


class FieldsAppPricePoint(Enum):
    customerPrice = 'customerPrice'
    priceTier = 'priceTier'
    proceeds = 'proceeds'
    territory = 'territory'


class IncludeEnum22(Enum):
    priceTier = 'priceTier'
    territory = 'territory'


class FieldsTerritory(Enum):
    currency = 'currency'


class FilterPriceTier(RootModel[List[str]]):
    root: List[str]


class FilterTerritory(RootModel[List[str]]):
    root: List[str]


class FieldsAppPricePoints(RootModel[List[FieldsAppPricePoint]]):
    root: List[FieldsAppPricePoint]


class Include11(RootModel[List[IncludeEnum22]]):
    root: List[IncludeEnum22]


class FieldsTerritories(RootModel[List[FieldsTerritory]]):
    root: List[FieldsTerritory]


class FieldsAppPricePoints1(RootModel[List[FieldsAppPricePoint]]):
    root: List[FieldsAppPricePoint]


class Include12(RootModel[List[IncludeEnum22]]):
    root: List[IncludeEnum22]


class FieldsTerritories1(RootModel[List[FieldsTerritory]]):
    root: List[FieldsTerritory]


class FieldsTerritories2(RootModel[List[FieldsTerritory]]):
    root: List[FieldsTerritory]


class FieldsAppPriceTier(Enum):
    pricePoints = 'pricePoints'


class IncludeEnum26(Enum):
    pricePoints = 'pricePoints'


class FilterId(RootModel[List[str]]):
    root: List[str]


class FieldsAppPriceTiers(RootModel[List[FieldsAppPriceTier]]):
    root: List[FieldsAppPriceTier]


class Include13(RootModel[List[IncludeEnum26]]):
    root: List[IncludeEnum26]


class FieldsAppPricePoints2(RootModel[List[FieldsAppPricePoint]]):
    root: List[FieldsAppPricePoint]


class FieldsAppPriceTiers1(RootModel[List[FieldsAppPriceTier]]):
    root: List[FieldsAppPriceTier]


class Include14(RootModel[List[IncludeEnum26]]):
    root: List[IncludeEnum26]


class FieldsAppPricePoints3(RootModel[List[FieldsAppPricePoint]]):
    root: List[FieldsAppPricePoint]


class FieldsAppPricePoints4(RootModel[List[FieldsAppPricePoint]]):
    root: List[FieldsAppPricePoint]


class FieldsAppPrice(Enum):
    app = 'app'
    priceTier = 'priceTier'


class IncludeEnum30(Enum):
    app = 'app'
    priceTier = 'priceTier'


class FieldsAppPrices(RootModel[List[FieldsAppPrice]]):
    root: List[FieldsAppPrice]


class Include15(RootModel[List[IncludeEnum30]]):
    root: List[IncludeEnum30]


class FieldsAppScreenshotSet(Enum):
    appScreenshots = 'appScreenshots'
    appStoreVersionLocalization = 'appStoreVersionLocalization'
    screenshotDisplayType = 'screenshotDisplayType'


class IncludeEnum32(Enum):
    appScreenshots = 'appScreenshots'
    appStoreVersionLocalization = 'appStoreVersionLocalization'


class FieldsAppScreenshot(Enum):
    appScreenshotSet = 'appScreenshotSet'
    assetDeliveryState = 'assetDeliveryState'
    assetToken = 'assetToken'
    assetType = 'assetType'
    fileName = 'fileName'
    fileSize = 'fileSize'
    imageAsset = 'imageAsset'
    sourceFileChecksum = 'sourceFileChecksum'
    uploadOperations = 'uploadOperations'
    uploaded = 'uploaded'


class FieldsAppScreenshotSets(RootModel[List[FieldsAppScreenshotSet]]):
    root: List[FieldsAppScreenshotSet]


class Include16(RootModel[List[IncludeEnum32]]):
    root: List[IncludeEnum32]


class FieldsAppScreenshots(RootModel[List[FieldsAppScreenshot]]):
    root: List[FieldsAppScreenshot]


class IncludeEnum34(Enum):
    appScreenshotSet = 'appScreenshotSet'


class FieldsAppScreenshotSets1(RootModel[List[FieldsAppScreenshotSet]]):
    root: List[FieldsAppScreenshotSet]


class FieldsAppScreenshots1(RootModel[List[FieldsAppScreenshot]]):
    root: List[FieldsAppScreenshot]


class Include17(RootModel[List[IncludeEnum34]]):
    root: List[IncludeEnum34]


class FieldsAppScreenshots2(RootModel[List[FieldsAppScreenshot]]):
    root: List[FieldsAppScreenshot]


class Include18(RootModel[List[IncludeEnum34]]):
    root: List[IncludeEnum34]


class FieldsAppStoreReviewAttachment(Enum):
    appStoreReviewDetail = 'appStoreReviewDetail'
    assetDeliveryState = 'assetDeliveryState'
    fileName = 'fileName'
    fileSize = 'fileSize'
    sourceFileChecksum = 'sourceFileChecksum'
    uploadOperations = 'uploadOperations'
    uploaded = 'uploaded'


class IncludeEnum38(Enum):
    appStoreReviewDetail = 'appStoreReviewDetail'


class FieldsAppStoreReviewAttachments(RootModel[List[FieldsAppStoreReviewAttachment]]):
    root: List[FieldsAppStoreReviewAttachment]


class Include19(RootModel[List[IncludeEnum38]]):
    root: List[IncludeEnum38]


class FieldsAppStoreReviewDetail(Enum):
    appStoreReviewAttachments = 'appStoreReviewAttachments'
    appStoreVersion = 'appStoreVersion'
    contactEmail = 'contactEmail'
    contactFirstName = 'contactFirstName'
    contactLastName = 'contactLastName'
    contactPhone = 'contactPhone'
    demoAccountName = 'demoAccountName'
    demoAccountPassword = 'demoAccountPassword'
    demoAccountRequired = 'demoAccountRequired'
    notes = 'notes'


class IncludeEnum40(Enum):
    appStoreReviewAttachments = 'appStoreReviewAttachments'
    appStoreVersion = 'appStoreVersion'


class FieldsAppStoreReviewDetails(RootModel[List[FieldsAppStoreReviewDetail]]):
    root: List[FieldsAppStoreReviewDetail]


class Include20(RootModel[List[IncludeEnum40]]):
    root: List[IncludeEnum40]


class FieldsAppStoreReviewAttachments1(RootModel[List[FieldsAppStoreReviewAttachment]]):
    root: List[FieldsAppStoreReviewAttachment]


class IncludeEnum42(Enum):
    appStoreReviewDetail = 'appStoreReviewDetail'


class FieldsAppStoreReviewDetails1(RootModel[List[FieldsAppStoreReviewDetail]]):
    root: List[FieldsAppStoreReviewDetail]


class FieldsAppStoreReviewAttachments2(RootModel[List[FieldsAppStoreReviewAttachment]]):
    root: List[FieldsAppStoreReviewAttachment]


class Include21(RootModel[List[IncludeEnum42]]):
    root: List[IncludeEnum42]


class FieldsAppStoreVersionLocalization(Enum):
    appPreviewSets = 'appPreviewSets'
    appScreenshotSets = 'appScreenshotSets'
    appStoreVersion = 'appStoreVersion'
    description = 'description'
    keywords = 'keywords'
    locale = 'locale'
    marketingUrl = 'marketingUrl'
    promotionalText = 'promotionalText'
    supportUrl = 'supportUrl'
    whatsNew = 'whatsNew'


class IncludeEnum44(Enum):
    appPreviewSets = 'appPreviewSets'
    appScreenshotSets = 'appScreenshotSets'
    appStoreVersion = 'appStoreVersion'


class FieldsAppStoreVersionLocalizations(
    RootModel[List[FieldsAppStoreVersionLocalization]]
):
    root: List[FieldsAppStoreVersionLocalization]


class Include22(RootModel[List[IncludeEnum44]]):
    root: List[IncludeEnum44]


class FieldsAppScreenshotSets2(RootModel[List[FieldsAppScreenshotSet]]):
    root: List[FieldsAppScreenshotSet]


class FieldsAppPreviewSets2(RootModel[List[FieldsAppPreviewSet]]):
    root: List[FieldsAppPreviewSet]


class FilterPreviewTypeEnum(Enum):
    IPHONE_65 = 'IPHONE_65'
    IPHONE_58 = 'IPHONE_58'
    IPHONE_55 = 'IPHONE_55'
    IPHONE_47 = 'IPHONE_47'
    IPHONE_40 = 'IPHONE_40'
    IPHONE_35 = 'IPHONE_35'
    IPAD_PRO_3GEN_129 = 'IPAD_PRO_3GEN_129'
    IPAD_PRO_3GEN_11 = 'IPAD_PRO_3GEN_11'
    IPAD_PRO_129 = 'IPAD_PRO_129'
    IPAD_105 = 'IPAD_105'
    IPAD_97 = 'IPAD_97'
    DESKTOP = 'DESKTOP'
    WATCH_SERIES_4 = 'WATCH_SERIES_4'
    WATCH_SERIES_3 = 'WATCH_SERIES_3'
    APPLE_TV = 'APPLE_TV'


class IncludeEnum46(Enum):
    appPreviews = 'appPreviews'
    appStoreVersionLocalization = 'appStoreVersionLocalization'


class FilterPreviewType(RootModel[List[FilterPreviewTypeEnum]]):
    root: List[FilterPreviewTypeEnum]


class FieldsAppStoreVersionLocalizations1(
    RootModel[List[FieldsAppStoreVersionLocalization]]
):
    root: List[FieldsAppStoreVersionLocalization]


class FieldsAppPreviews3(RootModel[List[FieldsAppPreview]]):
    root: List[FieldsAppPreview]


class FieldsAppPreviewSets3(RootModel[List[FieldsAppPreviewSet]]):
    root: List[FieldsAppPreviewSet]


class Include23(RootModel[List[IncludeEnum46]]):
    root: List[IncludeEnum46]


class FilterScreenshotDisplayTypeEnum(Enum):
    APP_IPHONE_65 = 'APP_IPHONE_65'
    APP_IPHONE_58 = 'APP_IPHONE_58'
    APP_IPHONE_55 = 'APP_IPHONE_55'
    APP_IPHONE_47 = 'APP_IPHONE_47'
    APP_IPHONE_40 = 'APP_IPHONE_40'
    APP_IPHONE_35 = 'APP_IPHONE_35'
    APP_IPAD_PRO_3GEN_129 = 'APP_IPAD_PRO_3GEN_129'
    APP_IPAD_PRO_3GEN_11 = 'APP_IPAD_PRO_3GEN_11'
    APP_IPAD_PRO_129 = 'APP_IPAD_PRO_129'
    APP_IPAD_105 = 'APP_IPAD_105'
    APP_IPAD_97 = 'APP_IPAD_97'
    APP_DESKTOP = 'APP_DESKTOP'
    APP_WATCH_SERIES_4 = 'APP_WATCH_SERIES_4'
    APP_WATCH_SERIES_3 = 'APP_WATCH_SERIES_3'
    APP_APPLE_TV = 'APP_APPLE_TV'
    IMESSAGE_APP_IPHONE_65 = 'IMESSAGE_APP_IPHONE_65'
    IMESSAGE_APP_IPHONE_58 = 'IMESSAGE_APP_IPHONE_58'
    IMESSAGE_APP_IPHONE_55 = 'IMESSAGE_APP_IPHONE_55'
    IMESSAGE_APP_IPHONE_47 = 'IMESSAGE_APP_IPHONE_47'
    IMESSAGE_APP_IPHONE_40 = 'IMESSAGE_APP_IPHONE_40'
    IMESSAGE_APP_IPAD_PRO_3GEN_129 = 'IMESSAGE_APP_IPAD_PRO_3GEN_129'
    IMESSAGE_APP_IPAD_PRO_3GEN_11 = 'IMESSAGE_APP_IPAD_PRO_3GEN_11'
    IMESSAGE_APP_IPAD_PRO_129 = 'IMESSAGE_APP_IPAD_PRO_129'
    IMESSAGE_APP_IPAD_105 = 'IMESSAGE_APP_IPAD_105'
    IMESSAGE_APP_IPAD_97 = 'IMESSAGE_APP_IPAD_97'


class IncludeEnum48(Enum):
    appScreenshots = 'appScreenshots'
    appStoreVersionLocalization = 'appStoreVersionLocalization'


class FilterScreenshotDisplayType(RootModel[List[FilterScreenshotDisplayTypeEnum]]):
    root: List[FilterScreenshotDisplayTypeEnum]


class FieldsAppStoreVersionLocalizations2(
    RootModel[List[FieldsAppStoreVersionLocalization]]
):
    root: List[FieldsAppStoreVersionLocalization]


class FieldsAppScreenshotSets3(RootModel[List[FieldsAppScreenshotSet]]):
    root: List[FieldsAppScreenshotSet]


class FieldsAppScreenshots3(RootModel[List[FieldsAppScreenshot]]):
    root: List[FieldsAppScreenshot]


class Include24(RootModel[List[IncludeEnum48]]):
    root: List[IncludeEnum48]


class FieldsAppStoreVersion(Enum):
    ageRatingDeclaration = 'ageRatingDeclaration'
    app = 'app'
    appStoreReviewDetail = 'appStoreReviewDetail'
    appStoreState = 'appStoreState'
    appStoreVersionLocalizations = 'appStoreVersionLocalizations'
    appStoreVersionPhasedRelease = 'appStoreVersionPhasedRelease'
    appStoreVersionSubmission = 'appStoreVersionSubmission'
    build = 'build'
    copyright = 'copyright'
    createdDate = 'createdDate'
    downloadable = 'downloadable'
    earliestReleaseDate = 'earliestReleaseDate'
    idfaDeclaration = 'idfaDeclaration'
    platform = 'platform'
    releaseType = 'releaseType'
    routingAppCoverage = 'routingAppCoverage'
    usesIdfa = 'usesIdfa'
    versionString = 'versionString'


class IncludeEnum50(Enum):
    ageRatingDeclaration = 'ageRatingDeclaration'
    app = 'app'
    appStoreReviewDetail = 'appStoreReviewDetail'
    appStoreVersionLocalizations = 'appStoreVersionLocalizations'
    appStoreVersionPhasedRelease = 'appStoreVersionPhasedRelease'
    appStoreVersionSubmission = 'appStoreVersionSubmission'
    build = 'build'
    idfaDeclaration = 'idfaDeclaration'
    routingAppCoverage = 'routingAppCoverage'


class FieldsIdfaDeclaration(Enum):
    appStoreVersion = 'appStoreVersion'
    attributesActionWithPreviousAd = 'attributesActionWithPreviousAd'
    attributesAppInstallationToPreviousAd = 'attributesAppInstallationToPreviousAd'
    honorsLimitedAdTracking = 'honorsLimitedAdTracking'
    servesAds = 'servesAds'


class FieldsRoutingAppCoverage(Enum):
    appStoreVersion = 'appStoreVersion'
    assetDeliveryState = 'assetDeliveryState'
    fileName = 'fileName'
    fileSize = 'fileSize'
    sourceFileChecksum = 'sourceFileChecksum'
    uploadOperations = 'uploadOperations'
    uploaded = 'uploaded'


class FieldsAppStoreVersionPhasedRelease(Enum):
    appStoreVersion = 'appStoreVersion'
    currentDayNumber = 'currentDayNumber'
    phasedReleaseState = 'phasedReleaseState'
    startDate = 'startDate'
    totalPauseDuration = 'totalPauseDuration'


class FieldsAgeRatingDeclaration4(Enum):
    alcoholTobaccoOrDrugUseOrReferences = 'alcoholTobaccoOrDrugUseOrReferences'
    gamblingAndContests = 'gamblingAndContests'
    gamblingSimulated = 'gamblingSimulated'
    horrorOrFearThemes = 'horrorOrFearThemes'
    kidsAgeBand = 'kidsAgeBand'
    matureOrSuggestiveThemes = 'matureOrSuggestiveThemes'
    medicalOrTreatmentInformation = 'medicalOrTreatmentInformation'
    profanityOrCrudeHumor = 'profanityOrCrudeHumor'
    sexualContentGraphicAndNudity = 'sexualContentGraphicAndNudity'
    sexualContentOrNudity = 'sexualContentOrNudity'
    unrestrictedWebAccess = 'unrestrictedWebAccess'
    violenceCartoonOrFantasy = 'violenceCartoonOrFantasy'
    violenceRealistic = 'violenceRealistic'
    violenceRealisticProlongedGraphicOrSadistic = (
        'violenceRealisticProlongedGraphicOrSadistic'
    )


class FieldsBuild(Enum):
    app = 'app'
    appEncryptionDeclaration = 'appEncryptionDeclaration'
    appStoreVersion = 'appStoreVersion'
    betaAppReviewSubmission = 'betaAppReviewSubmission'
    betaBuildLocalizations = 'betaBuildLocalizations'
    betaGroups = 'betaGroups'
    buildBetaDetail = 'buildBetaDetail'
    diagnosticSignatures = 'diagnosticSignatures'
    expirationDate = 'expirationDate'
    expired = 'expired'
    iconAssetToken = 'iconAssetToken'
    icons = 'icons'
    individualTesters = 'individualTesters'
    minOsVersion = 'minOsVersion'
    perfPowerMetrics = 'perfPowerMetrics'
    preReleaseVersion = 'preReleaseVersion'
    processingState = 'processingState'
    uploadedDate = 'uploadedDate'
    usesNonExemptEncryption = 'usesNonExemptEncryption'
    version = 'version'


class FieldsAppStoreVersionSubmission(Enum):
    appStoreVersion = 'appStoreVersion'


class FieldsAppStoreVersions(RootModel[List[FieldsAppStoreVersion]]):
    root: List[FieldsAppStoreVersion]


class Include25(RootModel[List[IncludeEnum50]]):
    root: List[IncludeEnum50]


class FieldsAppStoreVersionLocalizations3(
    RootModel[List[FieldsAppStoreVersionLocalization]]
):
    root: List[FieldsAppStoreVersionLocalization]


class FieldsIdfaDeclarations(RootModel[List[FieldsIdfaDeclaration]]):
    root: List[FieldsIdfaDeclaration]


class FieldsRoutingAppCoverages(RootModel[List[FieldsRoutingAppCoverage]]):
    root: List[FieldsRoutingAppCoverage]


class FieldsAppStoreVersionPhasedReleases(
    RootModel[List[FieldsAppStoreVersionPhasedRelease]]
):
    root: List[FieldsAppStoreVersionPhasedRelease]


class FieldsAgeRatingDeclarations2(RootModel[List[FieldsAgeRatingDeclaration4]]):
    root: List[FieldsAgeRatingDeclaration4]


class FieldsAppStoreReviewDetails2(RootModel[List[FieldsAppStoreReviewDetail]]):
    root: List[FieldsAppStoreReviewDetail]


class FieldsBuilds(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsAppStoreVersionSubmissions(
    RootModel[List[FieldsAppStoreVersionSubmission]]
):
    root: List[FieldsAppStoreVersionSubmission]


class FieldsAgeRatingDeclarations3(RootModel[List[FieldsAgeRatingDeclaration4]]):
    root: List[FieldsAgeRatingDeclaration4]


class IncludeEnum52(Enum):
    appStoreReviewAttachments = 'appStoreReviewAttachments'
    appStoreVersion = 'appStoreVersion'


class FieldsAppStoreReviewDetails3(RootModel[List[FieldsAppStoreReviewDetail]]):
    root: List[FieldsAppStoreReviewDetail]


class FieldsAppStoreVersions1(RootModel[List[FieldsAppStoreVersion]]):
    root: List[FieldsAppStoreVersion]


class FieldsAppStoreReviewAttachments3(RootModel[List[FieldsAppStoreReviewAttachment]]):
    root: List[FieldsAppStoreReviewAttachment]


class Include26(RootModel[List[IncludeEnum52]]):
    root: List[IncludeEnum52]


class FieldsAppStoreVersionLocalizations4(
    RootModel[List[FieldsAppStoreVersionLocalization]]
):
    root: List[FieldsAppStoreVersionLocalization]


class FieldsAppStoreVersionPhasedReleases1(
    RootModel[List[FieldsAppStoreVersionPhasedRelease]]
):
    root: List[FieldsAppStoreVersionPhasedRelease]


class IncludeEnum54(Enum):
    appStoreVersion = 'appStoreVersion'


class FieldsAppStoreVersions2(RootModel[List[FieldsAppStoreVersion]]):
    root: List[FieldsAppStoreVersion]


class FieldsAppStoreVersionSubmissions1(
    RootModel[List[FieldsAppStoreVersionSubmission]]
):
    root: List[FieldsAppStoreVersionSubmission]


class Include27(RootModel[List[IncludeEnum54]]):
    root: List[IncludeEnum54]


class FieldsBuilds1(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsIdfaDeclarations1(RootModel[List[FieldsIdfaDeclaration]]):
    root: List[FieldsIdfaDeclaration]


class FieldsRoutingAppCoverages1(RootModel[List[FieldsRoutingAppCoverage]]):
    root: List[FieldsRoutingAppCoverage]


class FilterAppStoreVersionsAppStoreStateEnum(Enum):
    DEVELOPER_REMOVED_FROM_SALE = 'DEVELOPER_REMOVED_FROM_SALE'
    DEVELOPER_REJECTED = 'DEVELOPER_REJECTED'
    IN_REVIEW = 'IN_REVIEW'
    INVALID_BINARY = 'INVALID_BINARY'
    METADATA_REJECTED = 'METADATA_REJECTED'
    PENDING_APPLE_RELEASE = 'PENDING_APPLE_RELEASE'
    PENDING_CONTRACT = 'PENDING_CONTRACT'
    PENDING_DEVELOPER_RELEASE = 'PENDING_DEVELOPER_RELEASE'
    PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
    PREORDER_READY_FOR_SALE = 'PREORDER_READY_FOR_SALE'
    PROCESSING_FOR_APP_STORE = 'PROCESSING_FOR_APP_STORE'
    READY_FOR_SALE = 'READY_FOR_SALE'
    REJECTED = 'REJECTED'
    REMOVED_FROM_SALE = 'REMOVED_FROM_SALE'
    WAITING_FOR_EXPORT_COMPLIANCE = 'WAITING_FOR_EXPORT_COMPLIANCE'
    WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
    REPLACED_WITH_NEW_VERSION = 'REPLACED_WITH_NEW_VERSION'


class FilterAppStoreVersionsPlatformEnum(Enum):
    IOS = 'IOS'
    MAC_OS = 'MAC_OS'
    TV_OS = 'TV_OS'


class SortEnum(Enum):
    bundleId = 'bundleId'
    field_bundleId = '-bundleId'
    name = 'name'
    field_name = '-name'
    sku = 'sku'
    field_sku = '-sku'


class IncludeEnum56(Enum):
    appInfos = 'appInfos'
    appStoreVersions = 'appStoreVersions'
    availableTerritories = 'availableTerritories'
    betaAppLocalizations = 'betaAppLocalizations'
    betaAppReviewDetail = 'betaAppReviewDetail'
    betaGroups = 'betaGroups'
    betaLicenseAgreement = 'betaLicenseAgreement'
    builds = 'builds'
    endUserLicenseAgreement = 'endUserLicenseAgreement'
    gameCenterEnabledVersions = 'gameCenterEnabledVersions'
    inAppPurchases = 'inAppPurchases'
    preOrder = 'preOrder'
    preReleaseVersions = 'preReleaseVersions'
    prices = 'prices'


class FieldsBetaGroup(Enum):
    app = 'app'
    betaTesters = 'betaTesters'
    builds = 'builds'
    createdDate = 'createdDate'
    feedbackEnabled = 'feedbackEnabled'
    isInternalGroup = 'isInternalGroup'
    name = 'name'
    publicLink = 'publicLink'
    publicLinkEnabled = 'publicLinkEnabled'
    publicLinkId = 'publicLinkId'
    publicLinkLimit = 'publicLinkLimit'
    publicLinkLimitEnabled = 'publicLinkLimitEnabled'


class FieldsPerfPowerMetric(Enum):
    deviceType = 'deviceType'
    metricType = 'metricType'
    platform = 'platform'


class FieldsPreReleaseVersion(Enum):
    app = 'app'
    builds = 'builds'
    platform = 'platform'
    version = 'version'


class FieldsInAppPurchase(Enum):
    apps = 'apps'
    inAppPurchaseType = 'inAppPurchaseType'
    productId = 'productId'
    referenceName = 'referenceName'
    state = 'state'


class FieldsBetaAppReviewDetail(Enum):
    app = 'app'
    contactEmail = 'contactEmail'
    contactFirstName = 'contactFirstName'
    contactLastName = 'contactLastName'
    contactPhone = 'contactPhone'
    demoAccountName = 'demoAccountName'
    demoAccountPassword = 'demoAccountPassword'
    demoAccountRequired = 'demoAccountRequired'
    notes = 'notes'


class FieldsGameCenterEnabledVersion(Enum):
    app = 'app'
    compatibleVersions = 'compatibleVersions'
    iconAsset = 'iconAsset'
    platform = 'platform'
    versionString = 'versionString'


class FieldsBetaAppLocalization(Enum):
    app = 'app'
    description = 'description'
    feedbackEmail = 'feedbackEmail'
    locale = 'locale'
    marketingUrl = 'marketingUrl'
    privacyPolicyUrl = 'privacyPolicyUrl'
    tvOsPrivacyPolicy = 'tvOsPrivacyPolicy'


class FieldsBetaLicenseAgreement(Enum):
    agreementText = 'agreementText'
    app = 'app'


class FieldsEndUserLicenseAgreement(Enum):
    agreementText = 'agreementText'
    app = 'app'
    territories = 'territories'


class FilterAppStoreVersionsAppStoreState(
    RootModel[List[FilterAppStoreVersionsAppStoreStateEnum]]
):
    root: List[FilterAppStoreVersionsAppStoreStateEnum]


class FilterAppStoreVersionsPlatform(
    RootModel[List[FilterAppStoreVersionsPlatformEnum]]
):
    root: List[FilterAppStoreVersionsPlatformEnum]


class FilterBundleId(RootModel[List[str]]):
    root: List[str]


class FilterName(RootModel[List[str]]):
    root: List[str]


class FilterSku(RootModel[List[str]]):
    root: List[str]


class FilterAppStoreVersions(RootModel[List[str]]):
    root: List[str]


class ExistsGameCenterEnabledVersions(RootModel[List[str]]):
    root: List[str]


class Sort(RootModel[List[SortEnum]]):
    root: List[SortEnum]


class FieldsApps3(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class Include28(RootModel[List[IncludeEnum56]]):
    root: List[IncludeEnum56]


class FieldsBetaGroups(RootModel[List[FieldsBetaGroup]]):
    root: List[FieldsBetaGroup]


class FieldsPerfPowerMetrics(RootModel[List[FieldsPerfPowerMetric]]):
    root: List[FieldsPerfPowerMetric]


class FieldsAppInfos2(RootModel[List[FieldsAppInfo]]):
    root: List[FieldsAppInfo]


class FieldsAppPreOrders1(RootModel[List[FieldsAppPreOrder]]):
    root: List[FieldsAppPreOrder]


class FieldsPreReleaseVersions(RootModel[List[FieldsPreReleaseVersion]]):
    root: List[FieldsPreReleaseVersion]


class FieldsAppPrices1(RootModel[List[FieldsAppPrice]]):
    root: List[FieldsAppPrice]


class FieldsInAppPurchases(RootModel[List[FieldsInAppPurchase]]):
    root: List[FieldsInAppPurchase]


class FieldsBetaAppReviewDetails(RootModel[List[FieldsBetaAppReviewDetail]]):
    root: List[FieldsBetaAppReviewDetail]


class FieldsTerritories3(RootModel[List[FieldsTerritory]]):
    root: List[FieldsTerritory]


class FieldsGameCenterEnabledVersions(RootModel[List[FieldsGameCenterEnabledVersion]]):
    root: List[FieldsGameCenterEnabledVersion]


class FieldsAppStoreVersions3(RootModel[List[FieldsAppStoreVersion]]):
    root: List[FieldsAppStoreVersion]


class FieldsBuilds2(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsBetaAppLocalizations(RootModel[List[FieldsBetaAppLocalization]]):
    root: List[FieldsBetaAppLocalization]


class FieldsBetaLicenseAgreements(RootModel[List[FieldsBetaLicenseAgreement]]):
    root: List[FieldsBetaLicenseAgreement]


class FieldsEndUserLicenseAgreements(RootModel[List[FieldsEndUserLicenseAgreement]]):
    root: List[FieldsEndUserLicenseAgreement]


class FieldsApps4(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class Include29(RootModel[List[IncludeEnum56]]):
    root: List[IncludeEnum56]


class FieldsBetaGroups1(RootModel[List[FieldsBetaGroup]]):
    root: List[FieldsBetaGroup]


class FieldsPerfPowerMetrics1(RootModel[List[FieldsPerfPowerMetric]]):
    root: List[FieldsPerfPowerMetric]


class FieldsAppInfos3(RootModel[List[FieldsAppInfo]]):
    root: List[FieldsAppInfo]


class FieldsAppPreOrders2(RootModel[List[FieldsAppPreOrder]]):
    root: List[FieldsAppPreOrder]


class FieldsPreReleaseVersions1(RootModel[List[FieldsPreReleaseVersion]]):
    root: List[FieldsPreReleaseVersion]


class FieldsAppPrices2(RootModel[List[FieldsAppPrice]]):
    root: List[FieldsAppPrice]


class FieldsInAppPurchases1(RootModel[List[FieldsInAppPurchase]]):
    root: List[FieldsInAppPurchase]


class FieldsBetaAppReviewDetails1(RootModel[List[FieldsBetaAppReviewDetail]]):
    root: List[FieldsBetaAppReviewDetail]


class FieldsTerritories4(RootModel[List[FieldsTerritory]]):
    root: List[FieldsTerritory]


class FieldsGameCenterEnabledVersions1(RootModel[List[FieldsGameCenterEnabledVersion]]):
    root: List[FieldsGameCenterEnabledVersion]


class FieldsAppStoreVersions4(RootModel[List[FieldsAppStoreVersion]]):
    root: List[FieldsAppStoreVersion]


class FieldsBuilds3(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsBetaAppLocalizations1(RootModel[List[FieldsBetaAppLocalization]]):
    root: List[FieldsBetaAppLocalization]


class FieldsBetaLicenseAgreements1(RootModel[List[FieldsBetaLicenseAgreement]]):
    root: List[FieldsBetaLicenseAgreement]


class FieldsEndUserLicenseAgreements1(RootModel[List[FieldsEndUserLicenseAgreement]]):
    root: List[FieldsEndUserLicenseAgreement]


class FieldsAgeRatingDeclaration8(Enum):
    alcoholTobaccoOrDrugUseOrReferences = 'alcoholTobaccoOrDrugUseOrReferences'
    contests = 'contests'
    gambling = 'gambling'
    gamblingAndContests = 'gamblingAndContests'
    gamblingSimulated = 'gamblingSimulated'
    horrorOrFearThemes = 'horrorOrFearThemes'
    kidsAgeBand = 'kidsAgeBand'
    matureOrSuggestiveThemes = 'matureOrSuggestiveThemes'
    medicalOrTreatmentInformation = 'medicalOrTreatmentInformation'
    profanityOrCrudeHumor = 'profanityOrCrudeHumor'
    seventeenPlus = 'seventeenPlus'
    sexualContentGraphicAndNudity = 'sexualContentGraphicAndNudity'
    sexualContentOrNudity = 'sexualContentOrNudity'
    unrestrictedWebAccess = 'unrestrictedWebAccess'
    violenceCartoonOrFantasy = 'violenceCartoonOrFantasy'
    violenceRealistic = 'violenceRealistic'
    violenceRealisticProlongedGraphicOrSadistic = (
        'violenceRealisticProlongedGraphicOrSadistic'
    )


class IncludeEnum60(Enum):
    app = 'app'
    appInfoLocalizations = 'appInfoLocalizations'
    primaryCategory = 'primaryCategory'
    primarySubcategoryOne = 'primarySubcategoryOne'
    primarySubcategoryTwo = 'primarySubcategoryTwo'
    secondaryCategory = 'secondaryCategory'
    secondarySubcategoryOne = 'secondarySubcategoryOne'
    secondarySubcategoryTwo = 'secondarySubcategoryTwo'


class FieldsAgeRatingDeclarations4(RootModel[List[FieldsAgeRatingDeclaration8]]):
    root: List[FieldsAgeRatingDeclaration8]


class FieldsAppInfos4(RootModel[List[FieldsAppInfo]]):
    root: List[FieldsAppInfo]


class FieldsAppCategories11(RootModel[List[FieldsAppCategory]]):
    root: List[FieldsAppCategory]


class FieldsAppInfoLocalizations3(RootModel[List[FieldsAppInfoLocalization]]):
    root: List[FieldsAppInfoLocalization]


class FieldsApps5(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class Include30(RootModel[List[IncludeEnum60]]):
    root: List[IncludeEnum60]


class FilterAppStoreStateEnum(Enum):
    DEVELOPER_REMOVED_FROM_SALE = 'DEVELOPER_REMOVED_FROM_SALE'
    DEVELOPER_REJECTED = 'DEVELOPER_REJECTED'
    IN_REVIEW = 'IN_REVIEW'
    INVALID_BINARY = 'INVALID_BINARY'
    METADATA_REJECTED = 'METADATA_REJECTED'
    PENDING_APPLE_RELEASE = 'PENDING_APPLE_RELEASE'
    PENDING_CONTRACT = 'PENDING_CONTRACT'
    PENDING_DEVELOPER_RELEASE = 'PENDING_DEVELOPER_RELEASE'
    PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
    PREORDER_READY_FOR_SALE = 'PREORDER_READY_FOR_SALE'
    PROCESSING_FOR_APP_STORE = 'PROCESSING_FOR_APP_STORE'
    READY_FOR_SALE = 'READY_FOR_SALE'
    REJECTED = 'REJECTED'
    REMOVED_FROM_SALE = 'REMOVED_FROM_SALE'
    WAITING_FOR_EXPORT_COMPLIANCE = 'WAITING_FOR_EXPORT_COMPLIANCE'
    WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
    REPLACED_WITH_NEW_VERSION = 'REPLACED_WITH_NEW_VERSION'


class FieldsAgeRatingDeclaration10(Enum):
    alcoholTobaccoOrDrugUseOrReferences = 'alcoholTobaccoOrDrugUseOrReferences'
    gamblingAndContests = 'gamblingAndContests'
    gamblingSimulated = 'gamblingSimulated'
    horrorOrFearThemes = 'horrorOrFearThemes'
    kidsAgeBand = 'kidsAgeBand'
    matureOrSuggestiveThemes = 'matureOrSuggestiveThemes'
    medicalOrTreatmentInformation = 'medicalOrTreatmentInformation'
    profanityOrCrudeHumor = 'profanityOrCrudeHumor'
    sexualContentGraphicAndNudity = 'sexualContentGraphicAndNudity'
    sexualContentOrNudity = 'sexualContentOrNudity'
    unrestrictedWebAccess = 'unrestrictedWebAccess'
    violenceCartoonOrFantasy = 'violenceCartoonOrFantasy'
    violenceRealistic = 'violenceRealistic'
    violenceRealisticProlongedGraphicOrSadistic = (
        'violenceRealisticProlongedGraphicOrSadistic'
    )


class IncludeEnum62(Enum):
    ageRatingDeclaration = 'ageRatingDeclaration'
    app = 'app'
    appStoreReviewDetail = 'appStoreReviewDetail'
    appStoreVersionLocalizations = 'appStoreVersionLocalizations'
    appStoreVersionPhasedRelease = 'appStoreVersionPhasedRelease'
    appStoreVersionSubmission = 'appStoreVersionSubmission'
    build = 'build'
    idfaDeclaration = 'idfaDeclaration'
    routingAppCoverage = 'routingAppCoverage'


class FilterAppStoreState(RootModel[List[FilterAppStoreStateEnum]]):
    root: List[FilterAppStoreStateEnum]


class FilterPlatform3(RootModel[List[FilterPlatformEnum]]):
    root: List[FilterPlatformEnum]


class FilterVersionString(RootModel[List[str]]):
    root: List[str]


class FieldsIdfaDeclarations2(RootModel[List[FieldsIdfaDeclaration]]):
    root: List[FieldsIdfaDeclaration]


class FieldsAppStoreVersionLocalizations5(
    RootModel[List[FieldsAppStoreVersionLocalization]]
):
    root: List[FieldsAppStoreVersionLocalization]


class FieldsRoutingAppCoverages2(RootModel[List[FieldsRoutingAppCoverage]]):
    root: List[FieldsRoutingAppCoverage]


class FieldsAppStoreVersionPhasedReleases2(
    RootModel[List[FieldsAppStoreVersionPhasedRelease]]
):
    root: List[FieldsAppStoreVersionPhasedRelease]


class FieldsAgeRatingDeclarations5(RootModel[List[FieldsAgeRatingDeclaration10]]):
    root: List[FieldsAgeRatingDeclaration10]


class FieldsAppStoreReviewDetails4(RootModel[List[FieldsAppStoreReviewDetail]]):
    root: List[FieldsAppStoreReviewDetail]


class FieldsAppStoreVersions5(RootModel[List[FieldsAppStoreVersion]]):
    root: List[FieldsAppStoreVersion]


class FieldsBuilds4(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsAppStoreVersionSubmissions2(
    RootModel[List[FieldsAppStoreVersionSubmission]]
):
    root: List[FieldsAppStoreVersionSubmission]


class FieldsApps6(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class Include31(RootModel[List[IncludeEnum62]]):
    root: List[IncludeEnum62]


class FieldsTerritories5(RootModel[List[FieldsTerritory]]):
    root: List[FieldsTerritory]


class FieldsBetaAppLocalizations2(RootModel[List[FieldsBetaAppLocalization]]):
    root: List[FieldsBetaAppLocalization]


class FieldsBetaAppReviewDetails2(RootModel[List[FieldsBetaAppReviewDetail]]):
    root: List[FieldsBetaAppReviewDetail]


class FieldsBetaGroups2(RootModel[List[FieldsBetaGroup]]):
    root: List[FieldsBetaGroup]


class FieldsBetaLicenseAgreements2(RootModel[List[FieldsBetaLicenseAgreement]]):
    root: List[FieldsBetaLicenseAgreement]


class FieldsBuilds5(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsEndUserLicenseAgreements2(RootModel[List[FieldsEndUserLicenseAgreement]]):
    root: List[FieldsEndUserLicenseAgreement]


class SortEnum2(Enum):
    versionString = 'versionString'
    field_versionString = '-versionString'


class IncludeEnum64(Enum):
    app = 'app'
    compatibleVersions = 'compatibleVersions'


class FilterPlatform4(RootModel[List[FilterPlatformEnum]]):
    root: List[FilterPlatformEnum]


class Sort1(RootModel[List[SortEnum2]]):
    root: List[SortEnum2]


class FieldsGameCenterEnabledVersions2(RootModel[List[FieldsGameCenterEnabledVersion]]):
    root: List[FieldsGameCenterEnabledVersion]


class FieldsApps7(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class Include32(RootModel[List[IncludeEnum64]]):
    root: List[IncludeEnum64]


class FilterInAppPurchaseTypeEnum(Enum):
    AUTOMATICALLY_RENEWABLE_SUBSCRIPTION = 'AUTOMATICALLY_RENEWABLE_SUBSCRIPTION'
    NON_CONSUMABLE = 'NON_CONSUMABLE'
    CONSUMABLE = 'CONSUMABLE'
    NON_RENEWING_SUBSCRIPTION = 'NON_RENEWING_SUBSCRIPTION'
    FREE_SUBSCRIPTION = 'FREE_SUBSCRIPTION'


class SortEnum4(Enum):
    inAppPurchaseType = 'inAppPurchaseType'
    field_inAppPurchaseType = '-inAppPurchaseType'
    productId = 'productId'
    field_productId = '-productId'
    referenceName = 'referenceName'
    field_referenceName = '-referenceName'


class IncludeEnum66(Enum):
    apps = 'apps'


class FilterInAppPurchaseType(RootModel[List[FilterInAppPurchaseTypeEnum]]):
    root: List[FilterInAppPurchaseTypeEnum]


class FilterCanBeSubmitted(RootModel[List[str]]):
    root: List[str]


class Sort2(RootModel[List[SortEnum4]]):
    root: List[SortEnum4]


class FieldsInAppPurchases2(RootModel[List[FieldsInAppPurchase]]):
    root: List[FieldsInAppPurchase]


class FieldsApps8(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class Include33(RootModel[List[IncludeEnum66]]):
    root: List[IncludeEnum66]


class FilterMetricTypeEnum(Enum):
    DISK = 'DISK'
    HANG = 'HANG'
    BATTERY = 'BATTERY'
    LAUNCH = 'LAUNCH'
    MEMORY = 'MEMORY'
    ANIMATION = 'ANIMATION'
    TERMINATION = 'TERMINATION'


class FilterPlatformEnum6(Enum):
    IOS = 'IOS'


class FilterDeviceType(RootModel[List[str]]):
    root: List[str]


class FilterMetricType(RootModel[List[FilterMetricTypeEnum]]):
    root: List[FilterMetricTypeEnum]


class FilterPlatform5(RootModel[List[FilterPlatformEnum6]]):
    root: List[FilterPlatformEnum6]


class FieldsAppPreOrders3(RootModel[List[FieldsAppPreOrder]]):
    root: List[FieldsAppPreOrder]


class FieldsPreReleaseVersions2(RootModel[List[FieldsPreReleaseVersion]]):
    root: List[FieldsPreReleaseVersion]


class IncludeEnum68(Enum):
    app = 'app'
    priceTier = 'priceTier'


class FieldsAppPrices3(RootModel[List[FieldsAppPrice]]):
    root: List[FieldsAppPrice]


class FieldsAppPriceTiers2(RootModel[List[FieldsAppPriceTier]]):
    root: List[FieldsAppPriceTier]


class FieldsApps9(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class Include34(RootModel[List[IncludeEnum68]]):
    root: List[IncludeEnum68]


class IncludeEnum70(Enum):
    app = 'app'


class FieldsBetaAppLocalizations3(RootModel[List[FieldsBetaAppLocalization]]):
    root: List[FieldsBetaAppLocalization]


class Include35(RootModel[List[IncludeEnum70]]):
    root: List[IncludeEnum70]


class FieldsApps10(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsBetaAppLocalizations4(RootModel[List[FieldsBetaAppLocalization]]):
    root: List[FieldsBetaAppLocalization]


class Include36(RootModel[List[IncludeEnum70]]):
    root: List[IncludeEnum70]


class FieldsApps11(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsApps12(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsBetaAppReviewDetails3(RootModel[List[FieldsBetaAppReviewDetail]]):
    root: List[FieldsBetaAppReviewDetail]


class Include37(RootModel[List[IncludeEnum70]]):
    root: List[IncludeEnum70]


class FieldsApps13(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsBetaAppReviewDetails4(RootModel[List[FieldsBetaAppReviewDetail]]):
    root: List[FieldsBetaAppReviewDetail]


class Include38(RootModel[List[IncludeEnum70]]):
    root: List[IncludeEnum70]


class FieldsApps14(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsApps15(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FilterBetaReviewStateEnum(Enum):
    WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
    IN_REVIEW = 'IN_REVIEW'
    REJECTED = 'REJECTED'
    APPROVED = 'APPROVED'


class FieldsBetaAppReviewSubmission(Enum):
    betaReviewState = 'betaReviewState'
    build = 'build'


class IncludeEnum78(Enum):
    build = 'build'


class FilterBetaReviewState(RootModel[List[FilterBetaReviewStateEnum]]):
    root: List[FilterBetaReviewStateEnum]


class FilterBuild(RootModel[List[str]]):
    root: List[str]


class FieldsBetaAppReviewSubmissions(RootModel[List[FieldsBetaAppReviewSubmission]]):
    root: List[FieldsBetaAppReviewSubmission]


class Include39(RootModel[List[IncludeEnum78]]):
    root: List[IncludeEnum78]


class FieldsBuilds6(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsBetaAppReviewSubmissions1(RootModel[List[FieldsBetaAppReviewSubmission]]):
    root: List[FieldsBetaAppReviewSubmission]


class Include40(RootModel[List[IncludeEnum78]]):
    root: List[IncludeEnum78]


class FieldsBuilds7(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsBuilds8(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsBetaBuildLocalization(Enum):
    build = 'build'
    locale = 'locale'
    whatsNew = 'whatsNew'


class FieldsBetaBuildLocalizations(RootModel[List[FieldsBetaBuildLocalization]]):
    root: List[FieldsBetaBuildLocalization]


class Include41(RootModel[List[IncludeEnum78]]):
    root: List[IncludeEnum78]


class FieldsBuilds9(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsBetaBuildLocalizations1(RootModel[List[FieldsBetaBuildLocalization]]):
    root: List[FieldsBetaBuildLocalization]


class Include42(RootModel[List[IncludeEnum78]]):
    root: List[IncludeEnum78]


class FieldsBuilds10(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsBuilds11(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class SortEnum6(Enum):
    createdDate = 'createdDate'
    field_createdDate = '-createdDate'
    name = 'name'
    field_name = '-name'
    publicLinkEnabled = 'publicLinkEnabled'
    field_publicLinkEnabled = '-publicLinkEnabled'
    publicLinkLimit = 'publicLinkLimit'
    field_publicLinkLimit = '-publicLinkLimit'


class IncludeEnum86(Enum):
    app = 'app'
    betaTesters = 'betaTesters'
    builds = 'builds'


class FieldsBetaTester(Enum):
    apps = 'apps'
    betaGroups = 'betaGroups'
    builds = 'builds'
    email = 'email'
    firstName = 'firstName'
    inviteType = 'inviteType'
    lastName = 'lastName'


class FilterIsInternalGroup(RootModel[List[str]]):
    root: List[str]


class FilterPublicLink(RootModel[List[str]]):
    root: List[str]


class FilterPublicLinkEnabled(RootModel[List[str]]):
    root: List[str]


class FilterPublicLinkLimitEnabled(RootModel[List[str]]):
    root: List[str]


class Sort3(RootModel[List[SortEnum6]]):
    root: List[SortEnum6]


class FieldsBetaGroups3(RootModel[List[FieldsBetaGroup]]):
    root: List[FieldsBetaGroup]


class Include43(RootModel[List[IncludeEnum86]]):
    root: List[IncludeEnum86]


class FieldsBuilds12(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsBetaTesters(RootModel[List[FieldsBetaTester]]):
    root: List[FieldsBetaTester]


class FieldsApps16(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsBetaGroups4(RootModel[List[FieldsBetaGroup]]):
    root: List[FieldsBetaGroup]


class Include44(RootModel[List[IncludeEnum86]]):
    root: List[IncludeEnum86]


class FieldsBuilds13(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsBetaTesters1(RootModel[List[FieldsBetaTester]]):
    root: List[FieldsBetaTester]


class FieldsApps17(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsApps18(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsBetaTesters2(RootModel[List[FieldsBetaTester]]):
    root: List[FieldsBetaTester]


class FieldsBuilds14(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class IncludeEnum90(Enum):
    app = 'app'


class FieldsBetaLicenseAgreements3(RootModel[List[FieldsBetaLicenseAgreement]]):
    root: List[FieldsBetaLicenseAgreement]


class Include45(RootModel[List[IncludeEnum90]]):
    root: List[IncludeEnum90]


class FieldsApps19(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsBetaLicenseAgreements4(RootModel[List[FieldsBetaLicenseAgreement]]):
    root: List[FieldsBetaLicenseAgreement]


class Include46(RootModel[List[IncludeEnum90]]):
    root: List[IncludeEnum90]


class FieldsApps20(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsApps21(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FilterInviteTypeEnum(Enum):
    EMAIL = 'EMAIL'
    PUBLIC_LINK = 'PUBLIC_LINK'


class SortEnum8(Enum):
    email = 'email'
    field_email = '-email'
    firstName = 'firstName'
    field_firstName = '-firstName'
    inviteType = 'inviteType'
    field_inviteType = '-inviteType'
    lastName = 'lastName'
    field_lastName = '-lastName'


class IncludeEnum94(Enum):
    apps = 'apps'
    betaGroups = 'betaGroups'
    builds = 'builds'


class FilterEmail(RootModel[List[str]]):
    root: List[str]


class FilterFirstName(RootModel[List[str]]):
    root: List[str]


class FilterInviteType(RootModel[List[FilterInviteTypeEnum]]):
    root: List[FilterInviteTypeEnum]


class FilterLastName(RootModel[List[str]]):
    root: List[str]


class FilterApps(RootModel[List[str]]):
    root: List[str]


class FilterBetaGroups(RootModel[List[str]]):
    root: List[str]


class Sort4(RootModel[List[SortEnum8]]):
    root: List[SortEnum8]


class FieldsBetaTesters3(RootModel[List[FieldsBetaTester]]):
    root: List[FieldsBetaTester]


class Include47(RootModel[List[IncludeEnum94]]):
    root: List[IncludeEnum94]


class FieldsBetaGroups5(RootModel[List[FieldsBetaGroup]]):
    root: List[FieldsBetaGroup]


class FieldsBuilds15(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsApps22(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsBetaTesters4(RootModel[List[FieldsBetaTester]]):
    root: List[FieldsBetaTester]


class Include48(RootModel[List[IncludeEnum94]]):
    root: List[IncludeEnum94]


class FieldsBetaGroups6(RootModel[List[FieldsBetaGroup]]):
    root: List[FieldsBetaGroup]


class FieldsBuilds16(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsApps23(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsApps24(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsBetaGroups7(RootModel[List[FieldsBetaGroup]]):
    root: List[FieldsBetaGroup]


class FieldsBuilds17(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsBuildBetaDetail(Enum):
    autoNotifyEnabled = 'autoNotifyEnabled'
    build = 'build'
    externalBuildState = 'externalBuildState'
    internalBuildState = 'internalBuildState'


class IncludeEnum98(Enum):
    build = 'build'


class FieldsBuildBetaDetails(RootModel[List[FieldsBuildBetaDetail]]):
    root: List[FieldsBuildBetaDetail]


class Include49(RootModel[List[IncludeEnum98]]):
    root: List[IncludeEnum98]


class FieldsBuilds18(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsBuildBetaDetails1(RootModel[List[FieldsBuildBetaDetail]]):
    root: List[FieldsBuildBetaDetail]


class Include50(RootModel[List[IncludeEnum98]]):
    root: List[IncludeEnum98]


class FieldsBuilds19(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsBuilds20(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FilterBetaAppReviewSubmissionBetaReviewStateEnum(Enum):
    WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
    IN_REVIEW = 'IN_REVIEW'
    REJECTED = 'REJECTED'
    APPROVED = 'APPROVED'


class FilterPreReleaseVersionPlatformEnum(Enum):
    IOS = 'IOS'
    MAC_OS = 'MAC_OS'
    TV_OS = 'TV_OS'


class FilterProcessingStateEnum(Enum):
    PROCESSING = 'PROCESSING'
    FAILED = 'FAILED'
    INVALID = 'INVALID'
    VALID = 'VALID'


class SortEnum10(Enum):
    preReleaseVersion = 'preReleaseVersion'
    field_preReleaseVersion = '-preReleaseVersion'
    uploadedDate = 'uploadedDate'
    field_uploadedDate = '-uploadedDate'
    version = 'version'
    field_version = '-version'


class IncludeEnum102(Enum):
    app = 'app'
    appEncryptionDeclaration = 'appEncryptionDeclaration'
    appStoreVersion = 'appStoreVersion'
    betaAppReviewSubmission = 'betaAppReviewSubmission'
    betaBuildLocalizations = 'betaBuildLocalizations'
    buildBetaDetail = 'buildBetaDetail'
    icons = 'icons'
    individualTesters = 'individualTesters'
    preReleaseVersion = 'preReleaseVersion'


class FieldsBuildIcon(Enum):
    iconAsset = 'iconAsset'
    iconType = 'iconType'


class FieldsDiagnosticSignature(Enum):
    diagnosticType = 'diagnosticType'
    logs = 'logs'
    signature = 'signature'
    weight = 'weight'


class FilterBetaAppReviewSubmissionBetaReviewState(
    RootModel[List[FilterBetaAppReviewSubmissionBetaReviewStateEnum]]
):
    root: List[FilterBetaAppReviewSubmissionBetaReviewStateEnum]


class FilterExpired(RootModel[List[str]]):
    root: List[str]


class FilterPreReleaseVersionPlatform(
    RootModel[List[FilterPreReleaseVersionPlatformEnum]]
):
    root: List[FilterPreReleaseVersionPlatformEnum]


class FilterPreReleaseVersionVersion(RootModel[List[str]]):
    root: List[str]


class FilterProcessingState(RootModel[List[FilterProcessingStateEnum]]):
    root: List[FilterProcessingStateEnum]


class FilterUsesNonExemptEncryption(RootModel[List[str]]):
    root: List[str]


class FilterVersion(RootModel[List[str]]):
    root: List[str]


class FilterAppStoreVersion(RootModel[List[str]]):
    root: List[str]


class FilterPreReleaseVersion(RootModel[List[str]]):
    root: List[str]


class Sort5(RootModel[List[SortEnum10]]):
    root: List[SortEnum10]


class FieldsBuilds21(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class Include51(RootModel[List[IncludeEnum102]]):
    root: List[IncludeEnum102]


class FieldsAppEncryptionDeclarations2(RootModel[List[FieldsAppEncryptionDeclaration]]):
    root: List[FieldsAppEncryptionDeclaration]


class FieldsBetaAppReviewSubmissions2(RootModel[List[FieldsBetaAppReviewSubmission]]):
    root: List[FieldsBetaAppReviewSubmission]


class FieldsBuildBetaDetails2(RootModel[List[FieldsBuildBetaDetail]]):
    root: List[FieldsBuildBetaDetail]


class FieldsBuildIcons(RootModel[List[FieldsBuildIcon]]):
    root: List[FieldsBuildIcon]


class FieldsPerfPowerMetrics2(RootModel[List[FieldsPerfPowerMetric]]):
    root: List[FieldsPerfPowerMetric]


class FieldsPreReleaseVersions3(RootModel[List[FieldsPreReleaseVersion]]):
    root: List[FieldsPreReleaseVersion]


class FieldsAppStoreVersions6(RootModel[List[FieldsAppStoreVersion]]):
    root: List[FieldsAppStoreVersion]


class FieldsDiagnosticSignatures(RootModel[List[FieldsDiagnosticSignature]]):
    root: List[FieldsDiagnosticSignature]


class FieldsBetaTesters5(RootModel[List[FieldsBetaTester]]):
    root: List[FieldsBetaTester]


class FieldsBetaBuildLocalizations2(RootModel[List[FieldsBetaBuildLocalization]]):
    root: List[FieldsBetaBuildLocalization]


class FieldsApps25(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsBuilds22(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class Include52(RootModel[List[IncludeEnum102]]):
    root: List[IncludeEnum102]


class FieldsAppEncryptionDeclarations3(RootModel[List[FieldsAppEncryptionDeclaration]]):
    root: List[FieldsAppEncryptionDeclaration]


class FieldsBetaAppReviewSubmissions3(RootModel[List[FieldsBetaAppReviewSubmission]]):
    root: List[FieldsBetaAppReviewSubmission]


class FieldsBuildBetaDetails3(RootModel[List[FieldsBuildBetaDetail]]):
    root: List[FieldsBuildBetaDetail]


class FieldsBuildIcons1(RootModel[List[FieldsBuildIcon]]):
    root: List[FieldsBuildIcon]


class FieldsPerfPowerMetrics3(RootModel[List[FieldsPerfPowerMetric]]):
    root: List[FieldsPerfPowerMetric]


class FieldsPreReleaseVersions4(RootModel[List[FieldsPreReleaseVersion]]):
    root: List[FieldsPreReleaseVersion]


class FieldsAppStoreVersions7(RootModel[List[FieldsAppStoreVersion]]):
    root: List[FieldsAppStoreVersion]


class FieldsDiagnosticSignatures1(RootModel[List[FieldsDiagnosticSignature]]):
    root: List[FieldsDiagnosticSignature]


class FieldsBetaTesters6(RootModel[List[FieldsBetaTester]]):
    root: List[FieldsBetaTester]


class FieldsBetaBuildLocalizations3(RootModel[List[FieldsBetaBuildLocalization]]):
    root: List[FieldsBetaBuildLocalization]


class FieldsApps26(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsApps27(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsAppEncryptionDeclarations4(RootModel[List[FieldsAppEncryptionDeclaration]]):
    root: List[FieldsAppEncryptionDeclaration]


class FieldsAppStoreVersions8(RootModel[List[FieldsAppStoreVersion]]):
    root: List[FieldsAppStoreVersion]


class FieldsBetaAppReviewSubmissions4(RootModel[List[FieldsBetaAppReviewSubmission]]):
    root: List[FieldsBetaAppReviewSubmission]


class FieldsBetaBuildLocalizations4(RootModel[List[FieldsBetaBuildLocalization]]):
    root: List[FieldsBetaBuildLocalization]


class FieldsBuildBetaDetails4(RootModel[List[FieldsBuildBetaDetail]]):
    root: List[FieldsBuildBetaDetail]


class FilterDiagnosticTypeEnum(Enum):
    DISK_WRITES = 'DISK_WRITES'


class FilterDiagnosticType(RootModel[List[FilterDiagnosticTypeEnum]]):
    root: List[FilterDiagnosticTypeEnum]


class FieldsDiagnosticSignatures2(RootModel[List[FieldsDiagnosticSignature]]):
    root: List[FieldsDiagnosticSignature]


class FieldsBuildIcons2(RootModel[List[FieldsBuildIcon]]):
    root: List[FieldsBuildIcon]


class FieldsBetaTesters7(RootModel[List[FieldsBetaTester]]):
    root: List[FieldsBetaTester]


class FilterMetricType1(RootModel[List[FilterMetricTypeEnum]]):
    root: List[FilterMetricTypeEnum]


class FilterPlatform6(RootModel[List[FilterPlatformEnum6]]):
    root: List[FilterPlatformEnum6]


class FieldsPreReleaseVersions5(RootModel[List[FieldsPreReleaseVersion]]):
    root: List[FieldsPreReleaseVersion]


class FilterPlatformEnum10(Enum):
    IOS = 'IOS'
    MAC_OS = 'MAC_OS'


class SortEnum12(Enum):
    id = 'id'
    field_id = '-id'
    identifier = 'identifier'
    field_identifier = '-identifier'
    name = 'name'
    field_name = '-name'
    platform = 'platform'
    field_platform = '-platform'
    seedId = 'seedId'
    field_seedId = '-seedId'


class FieldsBundleId(Enum):
    app = 'app'
    bundleIdCapabilities = 'bundleIdCapabilities'
    identifier = 'identifier'
    name = 'name'
    platform = 'platform'
    profiles = 'profiles'
    seedId = 'seedId'


class IncludeEnum106(Enum):
    app = 'app'
    bundleIdCapabilities = 'bundleIdCapabilities'
    profiles = 'profiles'


class FieldsBundleIdCapability(Enum):
    bundleId = 'bundleId'
    capabilityType = 'capabilityType'
    settings = 'settings'


class FieldsProfile(Enum):
    bundleId = 'bundleId'
    certificates = 'certificates'
    createdDate = 'createdDate'
    devices = 'devices'
    expirationDate = 'expirationDate'
    name = 'name'
    platform = 'platform'
    profileContent = 'profileContent'
    profileState = 'profileState'
    profileType = 'profileType'
    uuid = 'uuid'


class FilterIdentifier(RootModel[List[str]]):
    root: List[str]


class FilterPlatform7(RootModel[List[FilterPlatformEnum10]]):
    root: List[FilterPlatformEnum10]


class FilterSeedId(RootModel[List[str]]):
    root: List[str]


class Sort6(RootModel[List[SortEnum12]]):
    root: List[SortEnum12]


class FieldsBundleIds(RootModel[List[FieldsBundleId]]):
    root: List[FieldsBundleId]


class Include53(RootModel[List[IncludeEnum106]]):
    root: List[IncludeEnum106]


class FieldsBundleIdCapabilities(RootModel[List[FieldsBundleIdCapability]]):
    root: List[FieldsBundleIdCapability]


class FieldsProfiles(RootModel[List[FieldsProfile]]):
    root: List[FieldsProfile]


class FieldsApps28(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsBundleIds1(RootModel[List[FieldsBundleId]]):
    root: List[FieldsBundleId]


class Include54(RootModel[List[IncludeEnum106]]):
    root: List[IncludeEnum106]


class FieldsBundleIdCapabilities1(RootModel[List[FieldsBundleIdCapability]]):
    root: List[FieldsBundleIdCapability]


class FieldsProfiles1(RootModel[List[FieldsProfile]]):
    root: List[FieldsProfile]


class FieldsApps29(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsApps30(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsBundleIdCapabilities2(RootModel[List[FieldsBundleIdCapability]]):
    root: List[FieldsBundleIdCapability]


class FieldsProfiles2(RootModel[List[FieldsProfile]]):
    root: List[FieldsProfile]


class FilterCertificateTypeEnum(Enum):
    IOS_DEVELOPMENT = 'IOS_DEVELOPMENT'
    IOS_DISTRIBUTION = 'IOS_DISTRIBUTION'
    MAC_APP_DISTRIBUTION = 'MAC_APP_DISTRIBUTION'
    MAC_INSTALLER_DISTRIBUTION = 'MAC_INSTALLER_DISTRIBUTION'
    MAC_APP_DEVELOPMENT = 'MAC_APP_DEVELOPMENT'
    DEVELOPER_ID_KEXT = 'DEVELOPER_ID_KEXT'
    DEVELOPER_ID_APPLICATION = 'DEVELOPER_ID_APPLICATION'
    DEVELOPMENT = 'DEVELOPMENT'
    DISTRIBUTION = 'DISTRIBUTION'


class SortEnum14(Enum):
    certificateType = 'certificateType'
    field_certificateType = '-certificateType'
    displayName = 'displayName'
    field_displayName = '-displayName'
    id = 'id'
    field_id = '-id'
    serialNumber = 'serialNumber'
    field_serialNumber = '-serialNumber'


class FieldsCertificate(Enum):
    certificateContent = 'certificateContent'
    certificateType = 'certificateType'
    csrContent = 'csrContent'
    displayName = 'displayName'
    expirationDate = 'expirationDate'
    name = 'name'
    platform = 'platform'
    serialNumber = 'serialNumber'


class FilterCertificateType(RootModel[List[FilterCertificateTypeEnum]]):
    root: List[FilterCertificateTypeEnum]


class FilterDisplayName(RootModel[List[str]]):
    root: List[str]


class FilterSerialNumber(RootModel[List[str]]):
    root: List[str]


class Sort7(RootModel[List[SortEnum14]]):
    root: List[SortEnum14]


class FieldsCertificates(RootModel[List[FieldsCertificate]]):
    root: List[FieldsCertificate]


class FieldsCertificates1(RootModel[List[FieldsCertificate]]):
    root: List[FieldsCertificate]


class FilterStatu(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class SortEnum16(Enum):
    id = 'id'
    field_id = '-id'
    name = 'name'
    field_name = '-name'
    platform = 'platform'
    field_platform = '-platform'
    status = 'status'
    field_status = '-status'
    udid = 'udid'
    field_udid = '-udid'


class FieldsDevice(Enum):
    addedDate = 'addedDate'
    deviceClass = 'deviceClass'
    model = 'model'
    name = 'name'
    platform = 'platform'
    status = 'status'
    udid = 'udid'


class FilterPlatform8(RootModel[List[FilterPlatformEnum10]]):
    root: List[FilterPlatformEnum10]


class FilterStatus(RootModel[List[FilterStatu]]):
    root: List[FilterStatu]


class FilterUdid(RootModel[List[str]]):
    root: List[str]


class Sort8(RootModel[List[SortEnum16]]):
    root: List[SortEnum16]


class FieldsDevices(RootModel[List[FieldsDevice]]):
    root: List[FieldsDevice]


class FieldsDevices1(RootModel[List[FieldsDevice]]):
    root: List[FieldsDevice]


class IncludeEnum110(Enum):
    app = 'app'
    territories = 'territories'


class FieldsEndUserLicenseAgreements3(RootModel[List[FieldsEndUserLicenseAgreement]]):
    root: List[FieldsEndUserLicenseAgreement]


class Include55(RootModel[List[IncludeEnum110]]):
    root: List[IncludeEnum110]


class FieldsTerritories6(RootModel[List[FieldsTerritory]]):
    root: List[FieldsTerritory]


class FieldsTerritories7(RootModel[List[FieldsTerritory]]):
    root: List[FieldsTerritory]


class FilterReportTypeEnum(Enum):
    FINANCIAL = 'FINANCIAL'
    FINANCE_DETAIL = 'FINANCE_DETAIL'


class FilterRegionCode(RootModel[List[str]]):
    root: List[str]


class FilterReportDate(RootModel[List[str]]):
    root: List[str]


class FilterReportType(RootModel[List[FilterReportTypeEnum]]):
    root: List[FilterReportTypeEnum]


class FilterVendorNumber(RootModel[List[str]]):
    root: List[str]


class FilterPlatformEnum14(Enum):
    IOS = 'IOS'
    MAC_OS = 'MAC_OS'
    TV_OS = 'TV_OS'


class SortEnum18(Enum):
    versionString = 'versionString'
    field_versionString = '-versionString'


class IncludeEnum112(Enum):
    app = 'app'
    compatibleVersions = 'compatibleVersions'


class FilterPlatform9(RootModel[List[FilterPlatformEnum14]]):
    root: List[FilterPlatformEnum14]


class Sort9(RootModel[List[SortEnum18]]):
    root: List[SortEnum18]


class FieldsGameCenterEnabledVersions3(RootModel[List[FieldsGameCenterEnabledVersion]]):
    root: List[FieldsGameCenterEnabledVersion]


class FieldsApps31(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class Include56(RootModel[List[IncludeEnum112]]):
    root: List[IncludeEnum112]


class IncludeEnum114(Enum):
    apps = 'apps'


class FieldsInAppPurchases3(RootModel[List[FieldsInAppPurchase]]):
    root: List[FieldsInAppPurchase]


class Include57(RootModel[List[IncludeEnum114]]):
    root: List[IncludeEnum114]


class FilterBuildsProcessingStateEnum(Enum):
    PROCESSING = 'PROCESSING'
    FAILED = 'FAILED'
    INVALID = 'INVALID'
    VALID = 'VALID'


class SortEnum20(Enum):
    version = 'version'
    field_version = '-version'


class IncludeEnum116(Enum):
    app = 'app'
    builds = 'builds'


class FilterBuildsExpired(RootModel[List[str]]):
    root: List[str]


class FilterBuildsProcessingState(RootModel[List[FilterBuildsProcessingStateEnum]]):
    root: List[FilterBuildsProcessingStateEnum]


class FilterPlatform10(RootModel[List[FilterPlatformEnum14]]):
    root: List[FilterPlatformEnum14]


class Sort10(RootModel[List[SortEnum20]]):
    root: List[SortEnum20]


class FieldsPreReleaseVersions6(RootModel[List[FieldsPreReleaseVersion]]):
    root: List[FieldsPreReleaseVersion]


class Include58(RootModel[List[IncludeEnum116]]):
    root: List[IncludeEnum116]


class FieldsBuilds23(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsApps32(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsPreReleaseVersions7(RootModel[List[FieldsPreReleaseVersion]]):
    root: List[FieldsPreReleaseVersion]


class Include59(RootModel[List[IncludeEnum116]]):
    root: List[IncludeEnum116]


class FieldsBuilds24(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FieldsApps33(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsApps34(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsBuilds25(RootModel[List[FieldsBuild]]):
    root: List[FieldsBuild]


class FilterProfileStateEnum(Enum):
    ACTIVE = 'ACTIVE'
    INVALID = 'INVALID'


class FilterProfileTypeEnum(Enum):
    IOS_APP_DEVELOPMENT = 'IOS_APP_DEVELOPMENT'
    IOS_APP_STORE = 'IOS_APP_STORE'
    IOS_APP_ADHOC = 'IOS_APP_ADHOC'
    IOS_APP_INHOUSE = 'IOS_APP_INHOUSE'
    MAC_APP_DEVELOPMENT = 'MAC_APP_DEVELOPMENT'
    MAC_APP_STORE = 'MAC_APP_STORE'
    MAC_APP_DIRECT = 'MAC_APP_DIRECT'
    TVOS_APP_DEVELOPMENT = 'TVOS_APP_DEVELOPMENT'
    TVOS_APP_STORE = 'TVOS_APP_STORE'
    TVOS_APP_ADHOC = 'TVOS_APP_ADHOC'
    TVOS_APP_INHOUSE = 'TVOS_APP_INHOUSE'
    MAC_CATALYST_APP_DEVELOPMENT = 'MAC_CATALYST_APP_DEVELOPMENT'
    MAC_CATALYST_APP_STORE = 'MAC_CATALYST_APP_STORE'
    MAC_CATALYST_APP_DIRECT = 'MAC_CATALYST_APP_DIRECT'


class SortEnum22(Enum):
    id = 'id'
    field_id = '-id'
    name = 'name'
    field_name = '-name'
    profileState = 'profileState'
    field_profileState = '-profileState'
    profileType = 'profileType'
    field_profileType = '-profileType'


class IncludeEnum120(Enum):
    bundleId = 'bundleId'
    certificates = 'certificates'
    devices = 'devices'


class FilterProfileState(RootModel[List[FilterProfileStateEnum]]):
    root: List[FilterProfileStateEnum]


class FilterProfileType(RootModel[List[FilterProfileTypeEnum]]):
    root: List[FilterProfileTypeEnum]


class Sort11(RootModel[List[SortEnum22]]):
    root: List[SortEnum22]


class FieldsProfiles3(RootModel[List[FieldsProfile]]):
    root: List[FieldsProfile]


class Include60(RootModel[List[IncludeEnum120]]):
    root: List[IncludeEnum120]


class FieldsCertificates2(RootModel[List[FieldsCertificate]]):
    root: List[FieldsCertificate]


class FieldsDevices2(RootModel[List[FieldsDevice]]):
    root: List[FieldsDevice]


class FieldsBundleIds2(RootModel[List[FieldsBundleId]]):
    root: List[FieldsBundleId]


class FieldsProfiles4(RootModel[List[FieldsProfile]]):
    root: List[FieldsProfile]


class Include61(RootModel[List[IncludeEnum120]]):
    root: List[IncludeEnum120]


class FieldsCertificates3(RootModel[List[FieldsCertificate]]):
    root: List[FieldsCertificate]


class FieldsDevices3(RootModel[List[FieldsDevice]]):
    root: List[FieldsDevice]


class FieldsBundleIds3(RootModel[List[FieldsBundleId]]):
    root: List[FieldsBundleId]


class FieldsBundleIds4(RootModel[List[FieldsBundleId]]):
    root: List[FieldsBundleId]


class FieldsCertificates4(RootModel[List[FieldsCertificate]]):
    root: List[FieldsCertificate]


class FieldsDevices4(RootModel[List[FieldsDevice]]):
    root: List[FieldsDevice]


class IncludeEnum124(Enum):
    appStoreVersion = 'appStoreVersion'


class FieldsRoutingAppCoverages3(RootModel[List[FieldsRoutingAppCoverage]]):
    root: List[FieldsRoutingAppCoverage]


class Include62(RootModel[List[IncludeEnum124]]):
    root: List[IncludeEnum124]


class FilterFrequencyEnum(Enum):
    DAILY = 'DAILY'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'
    YEARLY = 'YEARLY'


class FilterReportSubTypeEnum(Enum):
    SUMMARY = 'SUMMARY'
    DETAILED = 'DETAILED'
    OPT_IN = 'OPT_IN'


class FilterReportTypeEnum2(Enum):
    SALES = 'SALES'
    PRE_ORDER = 'PRE_ORDER'
    NEWSSTAND = 'NEWSSTAND'
    SUBSCRIPTION = 'SUBSCRIPTION'
    SUBSCRIPTION_EVENT = 'SUBSCRIPTION_EVENT'
    SUBSCRIBER = 'SUBSCRIBER'


class FilterFrequency(RootModel[List[FilterFrequencyEnum]]):
    root: List[FilterFrequencyEnum]


class FilterReportSubType(RootModel[List[FilterReportSubTypeEnum]]):
    root: List[FilterReportSubTypeEnum]


class FilterReportType1(RootModel[List[FilterReportTypeEnum2]]):
    root: List[FilterReportTypeEnum2]


class FieldsTerritories8(RootModel[List[FieldsTerritory]]):
    root: List[FieldsTerritory]


class FilterRole(Enum):
    ADMIN = 'ADMIN'
    FINANCE = 'FINANCE'
    TECHNICAL = 'TECHNICAL'
    ACCOUNT_HOLDER = 'ACCOUNT_HOLDER'
    READ_ONLY = 'READ_ONLY'
    SALES = 'SALES'
    MARKETING = 'MARKETING'
    APP_MANAGER = 'APP_MANAGER'
    DEVELOPER = 'DEVELOPER'
    ACCESS_TO_REPORTS = 'ACCESS_TO_REPORTS'
    CUSTOMER_SUPPORT = 'CUSTOMER_SUPPORT'
    CREATE_APPS = 'CREATE_APPS'
    CLOUD_MANAGED_DEVELOPER_ID = 'CLOUD_MANAGED_DEVELOPER_ID'
    CLOUD_MANAGED_APP_DISTRIBUTION = 'CLOUD_MANAGED_APP_DISTRIBUTION'


class SortEnum24(Enum):
    email = 'email'
    field_email = '-email'
    lastName = 'lastName'
    field_lastName = '-lastName'


class FieldsUserInvitation(Enum):
    allAppsVisible = 'allAppsVisible'
    email = 'email'
    expirationDate = 'expirationDate'
    firstName = 'firstName'
    lastName = 'lastName'
    provisioningAllowed = 'provisioningAllowed'
    roles = 'roles'
    visibleApps = 'visibleApps'


class IncludeEnum126(Enum):
    visibleApps = 'visibleApps'


class FilterRoles(RootModel[List[FilterRole]]):
    root: List[FilterRole]


class FilterVisibleApps(RootModel[List[str]]):
    root: List[str]


class Sort12(RootModel[List[SortEnum24]]):
    root: List[SortEnum24]


class FieldsUserInvitations(RootModel[List[FieldsUserInvitation]]):
    root: List[FieldsUserInvitation]


class Include63(RootModel[List[IncludeEnum126]]):
    root: List[IncludeEnum126]


class FieldsApps35(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsUserInvitations1(RootModel[List[FieldsUserInvitation]]):
    root: List[FieldsUserInvitation]


class Include64(RootModel[List[IncludeEnum126]]):
    root: List[IncludeEnum126]


class FieldsApps36(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsApps37(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class SortEnum26(Enum):
    lastName = 'lastName'
    field_lastName = '-lastName'
    username = 'username'
    field_username = '-username'


class FieldsUser(Enum):
    allAppsVisible = 'allAppsVisible'
    firstName = 'firstName'
    lastName = 'lastName'
    provisioningAllowed = 'provisioningAllowed'
    roles = 'roles'
    username = 'username'
    visibleApps = 'visibleApps'


class FilterRoles1(RootModel[List[FilterRole]]):
    root: List[FilterRole]


class FilterUsername(RootModel[List[str]]):
    root: List[str]


class Sort13(RootModel[List[SortEnum26]]):
    root: List[SortEnum26]


class FieldsUsers(RootModel[List[FieldsUser]]):
    root: List[FieldsUser]


class Include65(RootModel[List[IncludeEnum126]]):
    root: List[IncludeEnum126]


class FieldsApps38(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsUsers1(RootModel[List[FieldsUser]]):
    root: List[FieldsUser]


class Include66(RootModel[List[IncludeEnum126]]):
    root: List[IncludeEnum126]


class FieldsApps39(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class FieldsApps40(RootModel[List[FieldsApp]]):
    root: List[FieldsApp]


class Attributes(BaseModel):
    alcoholTobaccoOrDrugUseOrReferences: Optional[
        AlcoholTobaccoOrDrugUseOrReferences
    ] = None
    contests: Optional[Contests] = None
    gambling: Optional[bool] = None
    gamblingAndContests: Optional[bool] = None
    gamblingSimulated: Optional[GamblingSimulated] = None
    horrorOrFearThemes: Optional[HorrorOrFearThemes] = None
    kidsAgeBand: Optional[KidsAgeBand] = None
    matureOrSuggestiveThemes: Optional[MatureOrSuggestiveThemes] = None
    medicalOrTreatmentInformation: Optional[MedicalOrTreatmentInformation] = None
    profanityOrCrudeHumor: Optional[ProfanityOrCrudeHumor] = None
    seventeenPlus: Optional[bool] = None
    sexualContentGraphicAndNudity: Optional[SexualContentGraphicAndNudity] = None
    sexualContentOrNudity: Optional[SexualContentOrNudity] = None
    unrestrictedWebAccess: Optional[bool] = None
    violenceCartoonOrFantasy: Optional[ViolenceCartoonOrFantasy] = None
    violenceRealistic: Optional[ViolenceRealistic] = None
    violenceRealisticProlongedGraphicOrSadistic: Optional[
        ViolenceRealisticProlongedGraphicOrSadistic
    ] = None


class AgeRatingDeclaration(BaseModel):
    attributes: Optional[Attributes] = None
    id: str
    links: ResourceLinks
    type: Type


class AgeRatingDeclarationResponse(BaseModel):
    data: AgeRatingDeclaration
    links: DocumentLinks


class Attributes1(BaseModel):
    alcoholTobaccoOrDrugUseOrReferences: Optional[
        AlcoholTobaccoOrDrugUseOrReferences
    ] = None
    contests: Optional[Contests] = None
    gambling: Optional[bool] = None
    gamblingAndContests: Optional[bool] = None
    gamblingSimulated: Optional[GamblingSimulated] = None
    horrorOrFearThemes: Optional[HorrorOrFearThemes] = None
    kidsAgeBand: Optional[KidsAgeBand] = None
    matureOrSuggestiveThemes: Optional[MatureOrSuggestiveThemes] = None
    medicalOrTreatmentInformation: Optional[MedicalOrTreatmentInformation] = None
    profanityOrCrudeHumor: Optional[ProfanityOrCrudeHumor] = None
    seventeenPlus: Optional[bool] = None
    sexualContentGraphicAndNudity: Optional[SexualContentGraphicAndNudity] = None
    sexualContentOrNudity: Optional[SexualContentOrNudity] = None
    unrestrictedWebAccess: Optional[bool] = None
    violenceCartoonOrFantasy: Optional[ViolenceCartoonOrFantasy] = None
    violenceRealistic: Optional[ViolenceRealistic] = None
    violenceRealisticProlongedGraphicOrSadistic: Optional[
        ViolenceRealisticProlongedGraphicOrSadistic
    ] = None


class Data(BaseModel):
    attributes: Optional[Attributes1] = None
    id: str
    type: Type


class AgeRatingDeclarationUpdateRequest(BaseModel):
    data: Data


class AppInfos(BaseModel):
    data: Optional[List[Datum]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class AppStoreVersions(BaseModel):
    data: Optional[List[Datum1]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class AvailableTerritories(BaseModel):
    data: Optional[List[Datum2]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class BetaAppLocalizations(BaseModel):
    data: Optional[List[Datum3]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class BetaGroups(BaseModel):
    data: Optional[List[Datum4]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Builds(BaseModel):
    data: Optional[List[Datum5]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class GameCenterEnabledVersions(BaseModel):
    data: Optional[List[Datum6]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class InAppPurchases(BaseModel):
    data: Optional[List[Datum7]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class PreReleaseVersions(BaseModel):
    data: Optional[List[Datum8]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Prices(BaseModel):
    data: Optional[List[Datum9]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships(BaseModel):
    appInfos: Optional[AppInfos] = None
    appStoreVersions: Optional[AppStoreVersions] = None
    availableTerritories: Optional[AvailableTerritories] = None
    betaAppLocalizations: Optional[BetaAppLocalizations] = None
    betaAppReviewDetail: Optional[BetaAppReviewDetail] = None
    betaGroups: Optional[BetaGroups] = None
    betaLicenseAgreement: Optional[BetaLicenseAgreement] = None
    builds: Optional[Builds] = None
    endUserLicenseAgreement: Optional[EndUserLicenseAgreement] = None
    gameCenterEnabledVersions: Optional[GameCenterEnabledVersions] = None
    inAppPurchases: Optional[InAppPurchases] = None
    preOrder: Optional[PreOrder] = None
    preReleaseVersions: Optional[PreReleaseVersions] = None
    prices: Optional[Prices] = None


class App(BaseModel):
    attributes: Optional[Attributes2] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships] = None
    type: Type16


class Attributes3(BaseModel):
    platforms: Optional[List[Platform]] = None


class Subcategories(BaseModel):
    data: Optional[List[Datum11]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships1(BaseModel):
    parent: Optional[Parent] = None
    subcategories: Optional[Subcategories] = None


class AppCategory(BaseModel):
    attributes: Optional[Attributes3] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships1] = None
    type: Type18


class AppCategoryResponse(BaseModel):
    data: AppCategory
    included: Optional[List[AppCategory]] = None
    links: DocumentLinks


class Attributes4(BaseModel):
    appEncryptionDeclarationState: Optional[AppEncryptionDeclarationState] = None
    availableOnFrenchStore: Optional[bool] = None
    codeValue: Optional[str] = None
    containsProprietaryCryptography: Optional[bool] = None
    containsThirdPartyCryptography: Optional[bool] = None
    documentName: Optional[str] = None
    documentType: Optional[str] = None
    documentUrl: Optional[str] = None
    exempt: Optional[bool] = None
    platform: Optional[Platform] = None
    uploadedDate: Optional[datetime] = None
    usesEncryption: Optional[bool] = None


class AppEncryptionDeclaration(BaseModel):
    attributes: Optional[Attributes4] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships2] = None
    type: Type22


class AppEncryptionDeclarationResponse(BaseModel):
    data: AppEncryptionDeclaration
    included: Optional[List[App]] = None
    links: DocumentLinks


class AppEncryptionDeclarationsResponse(BaseModel):
    data: List[AppEncryptionDeclaration]
    included: Optional[List[App]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class Attributes5(BaseModel):
    appStoreAgeRating: Optional[AppStoreAgeRating] = None
    appStoreState: Optional[AppStoreVersionState] = None
    brazilAgeRating: Optional[BrazilAgeRating] = None
    kidsAgeBand: Optional[KidsAgeBand] = None


class AppInfoLocalizations(BaseModel):
    data: Optional[List[Datum13]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships3(BaseModel):
    ageRatingDeclaration: Optional[AgeRatingDeclaration1] = None
    app: Optional[App2] = None
    appInfoLocalizations: Optional[AppInfoLocalizations] = None
    primaryCategory: Optional[PrimaryCategory] = None
    primarySubcategoryOne: Optional[PrimarySubcategoryOne] = None
    primarySubcategoryTwo: Optional[PrimarySubcategoryTwo] = None
    secondaryCategory: Optional[SecondaryCategory] = None
    secondarySubcategoryOne: Optional[SecondarySubcategoryOne] = None
    secondarySubcategoryTwo: Optional[SecondarySubcategoryTwo] = None


class AppInfo(BaseModel):
    attributes: Optional[Attributes5] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships3] = None
    type: Type33


class AppInfoLocalization(BaseModel):
    attributes: Optional[Attributes6] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships4] = None
    type: Type35


class AppInfoLocalizationResponse(BaseModel):
    data: AppInfoLocalization
    links: DocumentLinks


class AppInfoLocalizationsResponse(BaseModel):
    data: List[AppInfoLocalization]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class AppInfoResponse(BaseModel):
    data: AppInfo
    included: Optional[List[Union[AppInfoLocalization, AppCategory]]] = None
    links: DocumentLinks


class AppInfosResponse(BaseModel):
    data: List[AppInfo]
    included: Optional[List[Union[AppInfoLocalization, AppCategory]]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class AppMediaAssetState(BaseModel):
    errors: Optional[List[AppMediaStateError]] = None
    state: Optional[State] = None
    warnings: Optional[List[AppMediaStateError]] = None


class AppPreOrder(BaseModel):
    attributes: Optional[Attributes9] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships7] = None
    type: Type47


class AppPreOrderResponse(BaseModel):
    data: AppPreOrder
    links: DocumentLinks


class Attributes14(BaseModel):
    previewType: Optional[PreviewType] = None


class AppPreviews(BaseModel):
    data: Optional[List[Datum14]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships11(BaseModel):
    appPreviews: Optional[AppPreviews] = None
    appStoreVersionLocalization: Optional[AppStoreVersionLocalization] = None


class AppPreviewSet2(BaseModel):
    attributes: Optional[Attributes14] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships11] = None
    type: Type57


class AppPreviewSetAppPreviewsLinkagesResponse(BaseModel):
    data: List[Datum16]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class Attributes15(BaseModel):
    previewType: PreviewType


class Data34(BaseModel):
    attributes: Attributes15
    relationships: Relationships12
    type: Type61


class AppPreviewSetCreateRequest(BaseModel):
    data: Data34


class AppPrice(BaseModel):
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships13] = None
    type: Type65


class AppPricePoint(BaseModel):
    attributes: Optional[Attributes17] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships14] = None
    type: Type68


class AppPricePointResponse(BaseModel):
    data: AppPricePoint
    included: Optional[List[TerritoryModel]] = None
    links: DocumentLinks


class AppPricePointsResponse(BaseModel):
    data: List[AppPricePoint]
    included: Optional[List[TerritoryModel]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class AppPriceResponse(BaseModel):
    data: AppPrice
    links: DocumentLinks


class PricePoints(BaseModel):
    data: Optional[List[Datum17]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships15(BaseModel):
    pricePoints: Optional[PricePoints] = None


class AppPriceTier(BaseModel):
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships15] = None
    type: Type70


class AppPriceTierResponse(BaseModel):
    data: AppPriceTier
    included: Optional[List[AppPricePoint]] = None
    links: DocumentLinks


class AppPriceTiersResponse(BaseModel):
    data: List[AppPriceTier]
    included: Optional[List[AppPricePoint]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class AppPricesResponse(BaseModel):
    data: List[AppPrice]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class Attributes20(BaseModel):
    screenshotDisplayType: Optional[ScreenshotDisplayType] = None


class AppScreenshots(BaseModel):
    data: Optional[List[Datum18]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships18(BaseModel):
    appScreenshots: Optional[AppScreenshots] = None
    appStoreVersionLocalization: Optional[AppStoreVersionLocalization2] = None


class AppScreenshotSet2(BaseModel):
    attributes: Optional[Attributes20] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships18] = None
    type: Type77


class AppScreenshotSetAppScreenshotsLinkagesResponse(BaseModel):
    data: List[Datum20]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class Attributes21(BaseModel):
    screenshotDisplayType: ScreenshotDisplayType


class Data45(BaseModel):
    attributes: Attributes21
    relationships: Relationships19
    type: Type81


class AppScreenshotSetCreateRequest(BaseModel):
    data: Data45


class AppStoreReviewAttachments(BaseModel):
    data: Optional[List[Datum21]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships22(BaseModel):
    appStoreReviewAttachments: Optional[AppStoreReviewAttachments] = None
    appStoreVersion: Optional[AppStoreVersion1] = None


class AppStoreReviewDetail2(BaseModel):
    attributes: Optional[Attributes26] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships22] = None
    type: Type90


class Attributes29(BaseModel):
    appStoreState: Optional[AppStoreVersionState] = None
    copyright: Optional[str] = None
    createdDate: Optional[datetime] = None
    downloadable: Optional[bool] = None
    earliestReleaseDate: Optional[datetime] = None
    platform: Optional[Platform] = None
    releaseType: Optional[ReleaseType] = None
    usesIdfa: Optional[bool] = None
    versionString: Optional[str] = None


class AppStoreVersionLocalizations(BaseModel):
    data: Optional[List[Datum22]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships24(BaseModel):
    ageRatingDeclaration: Optional[AgeRatingDeclaration2] = None
    app: Optional[App6] = None
    appStoreReviewDetail: Optional[AppStoreReviewDetail3] = None
    appStoreVersionLocalizations: Optional[AppStoreVersionLocalizations] = None
    appStoreVersionPhasedRelease: Optional[AppStoreVersionPhasedRelease] = None
    appStoreVersionSubmission: Optional[AppStoreVersionSubmission] = None
    build: Optional[Build1] = None
    idfaDeclaration: Optional[IdfaDeclaration] = None
    routingAppCoverage: Optional[RoutingAppCoverage] = None


class AppStoreVersion(BaseModel):
    attributes: Optional[Attributes29] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships24] = None
    type: Type103


class AppStoreVersionBuildLinkageResponse(BaseModel):
    data: Data65
    links: DocumentLinks


class Attributes30(BaseModel):
    copyright: Optional[str] = None
    earliestReleaseDate: Optional[datetime] = None
    platform: Platform
    releaseType: Optional[ReleaseType] = None
    usesIdfa: Optional[bool] = None
    versionString: str


class Data66(BaseModel):
    attributes: Attributes30
    relationships: Relationships25
    type: Type108


class AppStoreVersionCreateRequest(BaseModel):
    data: Data66


class AppPreviewSets(BaseModel):
    data: Optional[List[Datum23]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class AppScreenshotSets(BaseModel):
    data: Optional[List[Datum24]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships26(BaseModel):
    appPreviewSets: Optional[AppPreviewSets] = None
    appScreenshotSets: Optional[AppScreenshotSets] = None
    appStoreVersion: Optional[AppStoreVersion3] = None


class AppStoreVersionLocalization4(BaseModel):
    attributes: Optional[Attributes31] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships26] = None
    type: Type112


class AppStoreVersionLocalizationResponse(BaseModel):
    data: AppStoreVersionLocalization4
    included: Optional[List[Union[AppScreenshotSet2, AppPreviewSet2]]] = None
    links: DocumentLinks


class AppStoreVersionLocalizationsResponse(BaseModel):
    data: List[AppStoreVersionLocalization4]
    included: Optional[List[Union[AppScreenshotSet2, AppPreviewSet2]]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class Attributes34(BaseModel):
    currentDayNumber: Optional[int] = None
    phasedReleaseState: Optional[PhasedReleaseState] = None
    startDate: Optional[datetime] = None
    totalPauseDuration: Optional[int] = None


class AppStoreVersionPhasedRelease1(BaseModel):
    attributes: Optional[Attributes34] = None
    id: str
    links: ResourceLinks
    type: Type116


class Attributes35(BaseModel):
    phasedReleaseState: Optional[PhasedReleaseState] = None


class Data73(BaseModel):
    attributes: Optional[Attributes35] = None
    relationships: Relationships28
    type: Type118


class AppStoreVersionPhasedReleaseCreateRequest(BaseModel):
    data: Data73


class AppStoreVersionPhasedReleaseResponse(BaseModel):
    data: AppStoreVersionPhasedRelease1
    links: DocumentLinks


class Data75(BaseModel):
    attributes: Optional[Attributes35] = None
    id: str
    type: Type118


class AppStoreVersionPhasedReleaseUpdateRequest(BaseModel):
    data: Data75


class AppStoreVersionSubmissionModel(BaseModel):
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships29] = None
    type: Type121


class AppStoreVersionSubmissionResponse(BaseModel):
    data: AppStoreVersionSubmissionModel
    links: DocumentLinks


class BetaAppLocalization(BaseModel):
    attributes: Optional[Attributes39] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships33] = None
    type: Type130


class BetaAppLocalizationResponse(BaseModel):
    data: BetaAppLocalization
    included: Optional[List[App]] = None
    links: DocumentLinks


class BetaAppLocalizationsResponse(BaseModel):
    data: List[BetaAppLocalization]
    included: Optional[List[App]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BetaAppReviewDetailModel(BaseModel):
    attributes: Optional[Attributes42] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships35] = None
    type: Type135


class BetaAppReviewDetailResponse(BaseModel):
    data: BetaAppReviewDetailModel
    included: Optional[List[App]] = None
    links: DocumentLinks


class BetaAppReviewDetailsResponse(BaseModel):
    data: List[BetaAppReviewDetailModel]
    included: Optional[List[App]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class Attributes44(BaseModel):
    betaReviewState: Optional[BetaReviewState] = None


class BetaAppReviewSubmission(BaseModel):
    attributes: Optional[Attributes44] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships36] = None
    type: Type138


class BetaBuildLocalization(BaseModel):
    attributes: Optional[Attributes45] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships38] = None
    type: Type142


class BetaTesters(BaseModel):
    data: Optional[List[Datum27]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Builds1(BaseModel):
    data: Optional[List[Datum28]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships40(BaseModel):
    app: Optional[App11] = None
    betaTesters: Optional[BetaTesters] = None
    builds: Optional[Builds1] = None


class BetaGroup(BaseModel):
    attributes: Optional[Attributes48] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships40] = None
    type: Type149


class BetaGroupBetaTestersLinkagesResponse(BaseModel):
    data: List[Datum30]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BetaGroupBuildsLinkagesResponse(BaseModel):
    data: List[Datum32]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BetaLicenseAgreementModel(BaseModel):
    attributes: Optional[Attributes51] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships42] = None
    type: Type160


class BetaLicenseAgreementResponse(BaseModel):
    data: BetaLicenseAgreementModel
    included: Optional[List[App]] = None
    links: DocumentLinks


class BetaLicenseAgreementsResponse(BaseModel):
    data: List[BetaLicenseAgreementModel]
    included: Optional[List[App]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class Apps(BaseModel):
    data: Optional[List[Datum35]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class BetaGroups1(BaseModel):
    data: Optional[List[Datum36]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Builds3(BaseModel):
    data: Optional[List[Datum37]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships43(BaseModel):
    apps: Optional[Apps] = None
    betaGroups: Optional[BetaGroups1] = None
    builds: Optional[Builds3] = None


class BetaTester(BaseModel):
    attributes: Optional[Attributes53] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships43] = None
    type: Type165


class BetaTesterAppsLinkagesResponse(BaseModel):
    data: List[Datum39]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BetaTesterBetaGroupsLinkagesResponse(BaseModel):
    data: List[Datum41]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BetaTesterBuildsLinkagesResponse(BaseModel):
    data: List[Datum43]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BetaTesterInvitation(BaseModel):
    id: str
    links: ResourceLinks
    type: Type175


class BetaTesterInvitationResponse(BaseModel):
    data: BetaTesterInvitation
    links: DocumentLinks


class Attributes55(BaseModel):
    expirationDate: Optional[datetime] = None
    expired: Optional[bool] = None
    iconAssetToken: Optional[ImageAsset] = None
    minOsVersion: Optional[str] = None
    processingState: Optional[ProcessingState] = None
    uploadedDate: Optional[datetime] = None
    usesNonExemptEncryption: Optional[bool] = None
    version: Optional[str] = None


class BetaBuildLocalizations(BaseModel):
    data: Optional[List[Datum46]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Icons(BaseModel):
    data: Optional[List[Datum47]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class IndividualTesters(BaseModel):
    data: Optional[List[Datum48]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships46(BaseModel):
    app: Optional[App15] = None
    appEncryptionDeclaration: Optional[AppEncryptionDeclaration1] = None
    appStoreVersion: Optional[AppStoreVersion8] = None
    betaAppReviewSubmission: Optional[BetaAppReviewSubmission1] = None
    betaBuildLocalizations: Optional[BetaBuildLocalizations] = None
    buildBetaDetail: Optional[BuildBetaDetail] = None
    icons: Optional[Icons] = None
    individualTesters: Optional[IndividualTesters] = None
    preReleaseVersion: Optional[PreReleaseVersion] = None


class Build(BaseModel):
    attributes: Optional[Attributes55] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships46] = None
    type: Type188


class BuildAppEncryptionDeclarationLinkageResponse(BaseModel):
    data: Data112
    links: DocumentLinks


class Attributes56(BaseModel):
    autoNotifyEnabled: Optional[bool] = None
    externalBuildState: Optional[ExternalBetaState] = None
    internalBuildState: Optional[InternalBetaState] = None


class BuildBetaDetail1(BaseModel):
    attributes: Optional[Attributes56] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships47] = None
    type: Type192


class BuildBetaDetailResponse(BaseModel):
    data: BuildBetaDetail1
    included: Optional[List[Build]] = None
    links: DocumentLinks


class BuildBetaDetailsResponse(BaseModel):
    data: List[BuildBetaDetail1]
    included: Optional[List[Build]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BuildBetaNotification(BaseModel):
    id: str
    links: ResourceLinks
    type: Type195


class BuildBetaNotificationResponse(BaseModel):
    data: BuildBetaNotification
    links: DocumentLinks


class Attributes58(BaseModel):
    iconAsset: Optional[ImageAsset] = None
    iconType: Optional[IconAssetType] = None


class BuildIcon(BaseModel):
    attributes: Optional[Attributes58] = None
    id: str
    links: ResourceLinks
    type: Type198


class BuildIconsResponse(BaseModel):
    data: List[BuildIcon]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BuildIndividualTestersLinkagesResponse(BaseModel):
    data: List[Datum51]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class Attributes60(BaseModel):
    identifier: Optional[str] = None
    name: Optional[str] = None
    platform: Optional[BundleIdPlatform] = None
    seedId: Optional[str] = None


class BundleIdCapabilities(BaseModel):
    data: Optional[List[Datum52]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Profiles(BaseModel):
    data: Optional[List[Datum53]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships50(BaseModel):
    app: Optional[App16] = None
    bundleIdCapabilities: Optional[BundleIdCapabilities] = None
    profiles: Optional[Profiles] = None


class BundleId(BaseModel):
    attributes: Optional[Attributes60] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships50] = None
    type: Type206


class Attributes61(BaseModel):
    capabilityType: Optional[CapabilityType] = None
    settings: Optional[List[CapabilitySetting]] = None


class BundleIdCapability(BaseModel):
    attributes: Optional[Attributes61] = None
    id: str
    links: ResourceLinks
    type: Type207


class Attributes62(BaseModel):
    capabilityType: CapabilityType
    settings: Optional[List[CapabilitySetting]] = None


class Data120(BaseModel):
    attributes: Attributes62
    relationships: Relationships51
    type: Type209


class BundleIdCapabilityCreateRequest(BaseModel):
    data: Data120


class BundleIdCapabilityResponse(BaseModel):
    data: BundleIdCapability
    links: DocumentLinks


class Attributes63(BaseModel):
    capabilityType: Optional[CapabilityType] = None
    settings: Optional[List[CapabilitySetting]] = None


class Data122(BaseModel):
    attributes: Optional[Attributes63] = None
    id: str
    type: Type209


class BundleIdCapabilityUpdateRequest(BaseModel):
    data: Data122


class Attributes64(BaseModel):
    identifier: str
    name: str
    platform: BundleIdPlatform
    seedId: Optional[str] = None


class Data123(BaseModel):
    attributes: Attributes64
    type: Type211


class BundleIdCreateRequest(BaseModel):
    data: Data123


class Attributes66(BaseModel):
    certificateContent: Optional[str] = None
    certificateType: Optional[CertificateType] = None
    displayName: Optional[str] = None
    expirationDate: Optional[datetime] = None
    name: Optional[str] = None
    platform: Optional[BundleIdPlatform] = None
    serialNumber: Optional[str] = None


class Certificate(BaseModel):
    attributes: Optional[Attributes66] = None
    id: str
    links: ResourceLinks
    type: Type213


class Attributes67(BaseModel):
    certificateType: CertificateType
    csrContent: str


class Data125(BaseModel):
    attributes: Attributes67
    type: Type213


class CertificateCreateRequest(BaseModel):
    data: Data125


class CertificateResponse(BaseModel):
    data: Certificate
    links: DocumentLinks


class CertificatesResponse(BaseModel):
    data: List[Certificate]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class Device(BaseModel):
    attributes: Optional[Attributes68] = None
    id: str
    links: ResourceLinks
    type: Type215


class DeviceResponse(BaseModel):
    data: Device
    links: DocumentLinks


class DevicesResponse(BaseModel):
    data: List[Device]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class DiagnosticLog(BaseModel):
    id: str
    links: ResourceLinks
    type: Type218


class DiagnosticLogsResponse(BaseModel):
    data: List[DiagnosticLog]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class DiagnosticSignature(BaseModel):
    attributes: Optional[Attributes71] = None
    id: str
    links: ResourceLinks
    type: Type219


class DiagnosticSignaturesResponse(BaseModel):
    data: List[DiagnosticSignature]
    included: Optional[List[DiagnosticLog]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class Territories(BaseModel):
    data: Optional[List[Datum54]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships52(BaseModel):
    app: Optional[App17] = None
    territories: Optional[Territories] = None


class EndUserLicenseAgreementModel(BaseModel):
    attributes: Optional[Attributes72] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships52] = None
    type: Type222


class EndUserLicenseAgreementResponse(BaseModel):
    data: EndUserLicenseAgreementModel
    included: Optional[List[TerritoryModel]] = None
    links: DocumentLinks


class Attributes75(BaseModel):
    iconAsset: Optional[ImageAsset] = None
    platform: Optional[Platform] = None
    versionString: Optional[str] = None


class CompatibleVersions(BaseModel):
    data: Optional[List[Datum57]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships55(BaseModel):
    app: Optional[App19] = None
    compatibleVersions: Optional[CompatibleVersions] = None


class GameCenterEnabledVersion(BaseModel):
    attributes: Optional[Attributes75] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships55] = None
    type: Type229


class GameCenterEnabledVersionCompatibleVersionsLinkagesResponse(BaseModel):
    data: List[Datum59]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class GameCenterEnabledVersionsResponse(BaseModel):
    data: List[GameCenterEnabledVersion]
    included: Optional[List[GameCenterEnabledVersion]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class IdfaDeclarationModel(BaseModel):
    attributes: Optional[Attributes76] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships56] = None
    type: Type234


class IdfaDeclarationResponse(BaseModel):
    data: IdfaDeclarationModel
    links: DocumentLinks


class Apps1(BaseModel):
    data: Optional[List[Datum60]] = None
    links: Optional[Links] = None
    meta: Optional[PagingInformation] = None


class Relationships58(BaseModel):
    apps: Optional[Apps1] = None


class InAppPurchase(BaseModel):
    attributes: Optional[Attributes79] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships58] = None
    type: Type239


class InAppPurchaseResponse(BaseModel):
    data: InAppPurchase
    links: DocumentLinks


class InAppPurchasesResponse(BaseModel):
    data: List[InAppPurchase]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class PerfPowerMetric(BaseModel):
    attributes: Optional[Attributes80] = None
    id: str
    links: ResourceLinks
    type: Type240


class PerfPowerMetricsResponse(BaseModel):
    data: List[PerfPowerMetric]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class PrereleaseVersion(BaseModel):
    attributes: Optional[Attributes81] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships59] = None
    type: Type243


class PrereleaseVersionResponse(BaseModel):
    data: PrereleaseVersion
    included: Optional[List[Union[Build, App]]] = None
    links: DocumentLinks


class Profile(BaseModel):
    attributes: Optional[Attributes82] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships60] = None
    type: Type247


class ProfileResponse(BaseModel):
    data: Profile
    included: Optional[List[Union[BundleId, Device, Certificate]]] = None
    links: DocumentLinks


class ProfilesResponse(BaseModel):
    data: List[Profile]
    included: Optional[List[Union[BundleId, Device, Certificate]]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class TerritoriesResponse(BaseModel):
    data: List[TerritoryModel]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class UploadOperation(BaseModel):
    length: Optional[int] = None
    method: Optional[str] = None
    offset: Optional[int] = None
    requestHeaders: Optional[List[UploadOperationHeader]] = None
    url: Optional[str] = None


class Attributes88(BaseModel):
    allAppsVisible: Optional[bool] = None
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    provisioningAllowed: Optional[bool] = None
    roles: Optional[List[UserRole]] = None
    username: Optional[str] = None


class User(BaseModel):
    attributes: Optional[Attributes88] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships64] = None
    type: Type259


class Attributes89(BaseModel):
    allAppsVisible: Optional[bool] = None
    email: Optional[EmailStr] = None
    expirationDate: Optional[datetime] = None
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    provisioningAllowed: Optional[bool] = None
    roles: Optional[List[UserRole]] = None


class UserInvitation(BaseModel):
    attributes: Optional[Attributes89] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships65] = None
    type: Type261


class Attributes90(BaseModel):
    allAppsVisible: Optional[bool] = None
    email: EmailStr
    firstName: str
    lastName: str
    provisioningAllowed: Optional[bool] = None
    roles: List[UserRole]


class Data145(BaseModel):
    attributes: Attributes90
    relationships: Optional[Relationships66] = None
    type: Type263


class UserInvitationCreateRequest(BaseModel):
    data: Data145


class UserInvitationResponse(BaseModel):
    data: UserInvitation
    included: Optional[List[App]] = None
    links: DocumentLinks


class UserInvitationsResponse(BaseModel):
    data: List[UserInvitation]
    included: Optional[List[App]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class UserResponse(BaseModel):
    data: User
    included: Optional[List[App]] = None
    links: DocumentLinks


class UsersResponse(BaseModel):
    data: List[User]
    included: Optional[List[App]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class AppCategoriesResponse(BaseModel):
    data: List[AppCategory]
    included: Optional[List[AppCategory]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class Attributes12(BaseModel):
    assetDeliveryState: Optional[AppMediaAssetState] = None
    fileName: Optional[str] = None
    fileSize: Optional[int] = None
    mimeType: Optional[str] = None
    previewFrameTimeCode: Optional[str] = None
    previewImage: Optional[ImageAsset] = None
    sourceFileChecksum: Optional[str] = None
    uploadOperations: Optional[List[UploadOperation]] = None
    videoUrl: Optional[str] = None


class AppPreview(BaseModel):
    attributes: Optional[Attributes12] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships9] = None
    type: Type52


class AppPreviewResponse(BaseModel):
    data: AppPreview
    links: DocumentLinks


class AppPreviewSetResponse(BaseModel):
    data: AppPreviewSet2
    included: Optional[List[AppPreview]] = None
    links: DocumentLinks


class AppPreviewSetsResponse(BaseModel):
    data: List[AppPreviewSet2]
    included: Optional[List[AppPreview]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class AppPreviewsResponse(BaseModel):
    data: List[AppPreview]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class AppResponse(BaseModel):
    data: App
    included: Optional[
        List[
            Union[
                BetaGroup,
                AppStoreVersion,
                PrereleaseVersion,
                BetaAppLocalization,
                Build,
                BetaLicenseAgreementModel,
                BetaAppReviewDetailModel,
                AppInfo,
                EndUserLicenseAgreementModel,
                AppPreOrder,
                AppPrice,
                TerritoryModel,
                InAppPurchase,
                GameCenterEnabledVersion,
                PerfPowerMetric,
            ]
        ]
    ] = None
    links: DocumentLinks


class Attributes18(BaseModel):
    assetDeliveryState: Optional[AppMediaAssetState] = None
    assetToken: Optional[str] = None
    assetType: Optional[str] = None
    fileName: Optional[str] = None
    fileSize: Optional[int] = None
    imageAsset: Optional[ImageAsset] = None
    sourceFileChecksum: Optional[str] = None
    uploadOperations: Optional[List[UploadOperation]] = None


class AppScreenshot(BaseModel):
    attributes: Optional[Attributes18] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships16] = None
    type: Type72


class AppScreenshotResponse(BaseModel):
    data: AppScreenshot
    links: DocumentLinks


class AppScreenshotSetResponse(BaseModel):
    data: AppScreenshotSet2
    included: Optional[List[AppScreenshot]] = None
    links: DocumentLinks


class AppScreenshotSetsResponse(BaseModel):
    data: List[AppScreenshotSet2]
    included: Optional[List[AppScreenshot]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class AppScreenshotsResponse(BaseModel):
    data: List[AppScreenshot]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class Attributes23(BaseModel):
    assetDeliveryState: Optional[AppMediaAssetState] = None
    fileName: Optional[str] = None
    fileSize: Optional[int] = None
    sourceFileChecksum: Optional[str] = None
    uploadOperations: Optional[List[UploadOperation]] = None


class AppStoreReviewAttachment(BaseModel):
    attributes: Optional[Attributes23] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships20] = None
    type: Type84


class AppStoreReviewAttachmentResponse(BaseModel):
    data: AppStoreReviewAttachment
    links: DocumentLinks


class AppStoreReviewAttachmentsResponse(BaseModel):
    data: List[AppStoreReviewAttachment]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class AppStoreReviewDetailResponse(BaseModel):
    data: AppStoreReviewDetail2
    included: Optional[List[AppStoreReviewAttachment]] = None
    links: DocumentLinks


class AppsResponse(BaseModel):
    data: List[App]
    included: Optional[
        List[
            Union[
                BetaGroup,
                AppStoreVersion,
                PrereleaseVersion,
                BetaAppLocalization,
                Build,
                BetaLicenseAgreementModel,
                BetaAppReviewDetailModel,
                AppInfo,
                EndUserLicenseAgreementModel,
                AppPreOrder,
                AppPrice,
                TerritoryModel,
                InAppPurchase,
                GameCenterEnabledVersion,
                PerfPowerMetric,
            ]
        ]
    ] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BetaAppReviewSubmissionResponse(BaseModel):
    data: BetaAppReviewSubmission
    included: Optional[List[Build]] = None
    links: DocumentLinks


class BetaAppReviewSubmissionsResponse(BaseModel):
    data: List[BetaAppReviewSubmission]
    included: Optional[List[Build]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BetaBuildLocalizationResponse(BaseModel):
    data: BetaBuildLocalization
    included: Optional[List[Build]] = None
    links: DocumentLinks


class BetaBuildLocalizationsResponse(BaseModel):
    data: List[BetaBuildLocalization]
    included: Optional[List[Build]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BetaGroupResponse(BaseModel):
    data: BetaGroup
    included: Optional[List[Union[App, Build, BetaTester]]] = None
    links: DocumentLinks


class BetaGroupsResponse(BaseModel):
    data: List[BetaGroup]
    included: Optional[List[Union[App, Build, BetaTester]]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BetaTesterResponse(BaseModel):
    data: BetaTester
    included: Optional[List[Union[App, BetaGroup, Build]]] = None
    links: DocumentLinks


class BetaTestersResponse(BaseModel):
    data: List[BetaTester]
    included: Optional[List[Union[App, BetaGroup, Build]]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BuildResponse(BaseModel):
    data: Build
    included: Optional[
        List[
            Union[
                PrereleaseVersion,
                BetaTester,
                BetaBuildLocalization,
                AppEncryptionDeclaration,
                BetaAppReviewSubmission,
                App,
                BuildBetaDetail1,
                AppStoreVersion,
                BuildIcon,
                PerfPowerMetric,
                DiagnosticSignature,
            ]
        ]
    ] = None
    links: DocumentLinks


class BuildsResponse(BaseModel):
    data: List[Build]
    included: Optional[
        List[
            Union[
                PrereleaseVersion,
                BetaTester,
                BetaBuildLocalization,
                AppEncryptionDeclaration,
                BetaAppReviewSubmission,
                App,
                BuildBetaDetail1,
                AppStoreVersion,
                BuildIcon,
                PerfPowerMetric,
                DiagnosticSignature,
            ]
        ]
    ] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BundleIdCapabilitiesResponse(BaseModel):
    data: List[BundleIdCapability]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class BundleIdResponse(BaseModel):
    data: BundleId
    included: Optional[List[Union[Profile, BundleIdCapability, App]]] = None
    links: DocumentLinks


class BundleIdsResponse(BaseModel):
    data: List[BundleId]
    included: Optional[List[Union[Profile, BundleIdCapability, App]]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class PreReleaseVersionsResponse(BaseModel):
    data: List[PrereleaseVersion]
    included: Optional[List[Union[Build, App]]] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None


class RoutingAppCoverageModel(BaseModel):
    attributes: Optional[Attributes23] = None
    id: str
    links: ResourceLinks
    relationships: Optional[Relationships62] = None
    type: Type253


class RoutingAppCoverageResponse(BaseModel):
    data: RoutingAppCoverageModel
    links: DocumentLinks


class AppStoreVersionResponse(BaseModel):
    data: AppStoreVersion
    included: Optional[
        List[
            Union[
                AgeRatingDeclaration,
                AppStoreVersionLocalization4,
                Build,
                AppStoreVersionPhasedRelease1,
                RoutingAppCoverageModel,
                AppStoreReviewDetail2,
                AppStoreVersionSubmissionModel,
                IdfaDeclarationModel,
            ]
        ]
    ] = None
    links: DocumentLinks


class AppStoreVersionsResponse(BaseModel):
    data: List[AppStoreVersion]
    included: Optional[
        List[
            Union[
                AgeRatingDeclaration,
                AppStoreVersionLocalization4,
                Build,
                AppStoreVersionPhasedRelease1,
                RoutingAppCoverageModel,
                AppStoreReviewDetail2,
                AppStoreVersionSubmissionModel,
                IdfaDeclarationModel,
            ]
        ]
    ] = None
    links: PagedDocumentLinks
    meta: Optional[PagingInformation] = None
